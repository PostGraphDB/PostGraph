/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
LOAD 'postgraph';
SET search_path TO postgraph;
CREATE GRAPH traversal_functions;
NOTICE:  graph "traversal_functions" has been created
 create_graph 
--------------
 
(1 row)

USE GRAPH traversal_functions;
 use_graph 
-----------
 
(1 row)

--
-- Create table to hold the start and end vertices to test the SRF
--
-- Create a graph to test
CREATE (b:begin)-[:edge]->(u1:middle)-[:edge]->(u2:middle)-[:edge]->(u3:middle)-[:edge]->(e:end),
	(u1)-[:self_loop]->(u1),
	(e)-[:self_loop]->(e),
	(b)-[:alternate_edge]->(u1),
	(u2)-[:alternate_edge]->(u3),
	(u3)-[:alternate_edge]->(e),
	(u2)-[:bypass_edge]->(e),
	(e)-[:alternate_edge]->(u3), 
	(u3)-[:alternate_edge]->(u2),
	(u2)-[:bypass_edge]->(b);
--
(0 rows)

MATCH p=(u:begin)-[*3..3]->(v:end) RETURN size(p);
 size 
------
 7
 7
(2 rows)

MATCH p=(u:begin)-[*]->(v:end) RETURN DISTINCT @-@ p;
 ?column? 
----------
 9
 4
 6
 8
 5
 7
 10
 3
(8 rows)

MATCH p=(u:begin)-[*3..3]->(v:end) RETURN relationships(p) ;
                                                                                                                                                                                                         relationships                                                                                                                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"{\"id\": 2251799813685249, \"start_id\": 844424930131969, \"end_id\": 1407374883553281, \"label\": \"alternate_edge\", \"properties\": {}}","{\"id\": 1125899906842627, \"start_id\": 1407374883553281, \"end_id\": 1407374883553282, \"label\": \"edge\", \"properties\": {}}","{\"id\": 2533274790395905, \"start_id\": 1407374883553282, \"end_id\": 1688849860263937, \"label\": \"bypass_edge\", \"properties\": {}}"}
 {"{\"id\": 1125899906842628, \"start_id\": 844424930131969, \"end_id\": 1407374883553281, \"label\": \"edge\", \"properties\": {}}","{\"id\": 1125899906842627, \"start_id\": 1407374883553281, \"end_id\": 1407374883553282, \"label\": \"edge\", \"properties\": {}}","{\"id\": 2533274790395905, \"start_id\": 1407374883553282, \"end_id\": 1688849860263937, \"label\": \"bypass_edge\", \"properties\": {}}"}
(2 rows)

MATCH p=(u:begin)-[*3..3]->(v:end) RETURN nodes(p);
                                                                                                                                            nodes                                                                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"{\"id\": 844424930131969, \"label\": \"begin\", \"properties\": {}}","{\"id\": 1407374883553281, \"label\": \"middle\", \"properties\": {}}","{\"id\": 1407374883553281, \"label\": \"middle\", \"properties\": {}}","{\"id\": 1688849860263937, \"label\": \"end\", \"properties\": {}}"}
 {"{\"id\": 844424930131969, \"label\": \"begin\", \"properties\": {}}","{\"id\": 1407374883553281, \"label\": \"middle\", \"properties\": {}}","{\"id\": 1407374883553281, \"label\": \"middle\", \"properties\": {}}","{\"id\": 1688849860263937, \"label\": \"end\", \"properties\": {}}"}
(2 rows)

MATCH p=(u:begin)-[*3..3]->(v:end) WITH nodes(p) as nodes RETURN nodes[1];
ERROR:  operator does not exist: vertex[] -> gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH p=(u:begin)-[*3..3]->(v:end) WITH nodes(p) as nodes RETURN nodes[size(nodes) - 1];
ERROR:  function postgraph.size(vertex[]) does not exist
LINE 1: .....3]->(v:end) WITH nodes(p) as nodes RETURN nodes[size(nodes...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--
-- Clean up
--
DROP GRAPH traversal_functions CASCADE;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to table traversal_functions._ag_label_vertex
drop cascades to table traversal_functions._ag_label_edge
drop cascades to table traversal_functions.begin
drop cascades to table traversal_functions.edge
drop cascades to table traversal_functions.middle
drop cascades to table traversal_functions."end"
drop cascades to table traversal_functions.self_loop
drop cascades to table traversal_functions.alternate_edge
drop cascades to table traversal_functions.bypass_edge
NOTICE:  graph "traversal_functions" has been dropped
 drop_graph 
------------
 
(1 row)

--
-- End
--
