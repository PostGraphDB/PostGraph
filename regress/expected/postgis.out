/*
 * PostGraph
 * Copyright (C) 2023 PostGraphDB
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
SET extra_float_digits = 0;
LOAD 'postgraph';
LOAD 'postgis-3';
SET search_path TO postgraph, public;
set timezone TO 'GMT';
SELECT * FROM create_graph('postgis');
NOTICE:  graph "postgis" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'box(1 2, 5 6)'::box2d$$) AS r(c gtype);
      c       
--------------
 BOX(1 2,5 6)
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'BOX3D(1 2 3, 4 5 6)'::box3d$$) AS r(c gtype);
         c          
--------------------
 BOX3D(1 2 3,4 5 6)
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'SPHEROID["WGS 84",6378137,298.257223563]'::spheroid$$) AS r(c gtype);
                    c                     
------------------------------------------
 SPHEROID("WGS 84",6378137,298.257223563)
(1 row)

SELECT * FROM cypher('postgis', $$
     RETURN 'POLYHEDRALSURFACE Z (
  ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),
  ((0 0 0, 0 1 0, 0 1 1, 0 0 1, 0 0 0)),
  ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),
  ((1 1 1, 1 0 1, 0 0 1, 0 1 1, 1 1 1)),
  ((1 1 1, 1 0 1, 1 0 0, 1 1 0, 1 1 1)),
  ((1 1 1, 1 1 0, 0 1 0, 0 1 1, 1 1 1))
)'::geometry
$$) AS r(c gtype);
c


(1 row)

--
-- Box3D
--
WITH u AS (SELECT 'BOX3D(1 2 3, 4 5 6)'::box3d AS g)
SELECT ST_XMin((g)), ST_YMin(g), ST_ZMin(g), ST_XMax(g), ST_YMax(g), ST_ZMax(g)from u;
 st_xmin | st_ymin | st_zmin | st_xmax | st_ymax | st_zmax 
---------+---------+---------+---------+---------+---------
       1 |       2 |       3 |       4 |       5 |       6
(1 row)

SELECT * FROM cypher('postgis', $$
     WITH 'BOX3D(1 2 3, 4 5 6)'::box3d AS g	
     RETURN ST_XMin((g)), ST_YMin(g), ST_ZMin(g), ST_XMax(g), ST_YMax(g), ST_ZMax(g)
$$) AS (xmin gtype, ymin gtype, zmin gtype, xmax gtype, ymax gtype, zmax gtype);
 xmin | ymin | zmin | xmax | ymax | zmax 
------+------+------+------+------+------
 1.0  | 2.0  | 3.0  | 4.0  | 5.0  | 6.0
(1 row)

--
-- Geometry
--
--
-- I/O Routines
--
-- NOTE: The first two queries for each type is the PostGIS Geometry type, used to validate I/O is exactly the same
--
-- Point (2 Dimensional) I/O
SELECT 'POINT( 1 2 )'::geometry;
                  geometry                  
--------------------------------------------
 0101000000000000000000F03F0000000000000040
(1 row)

SELECT ST_AsEWKT('POINT( 1 2 )'::geometry);
 st_asewkt  
------------
 POINT(1 2)
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'POINT( 1 2 )'::geometry$$) AS r(c gtype);
                     c                      
--------------------------------------------
 0101000000000000000000F03F0000000000000040
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('POINT( 1 2 )'::geometry) $$) AS r(c gtype);
      c       
--------------
 "POINT(1 2)"
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('POINT( 1 2 )') $$) AS r(c gtype);
      c       
--------------
 "POINT(1 2)"
(1 row)

-- Point (3 Dimensional) I/O
SELECT 'POINT( 1 2 3 )'::geometry;
                          geometry                          
------------------------------------------------------------
 0101000080000000000000F03F00000000000000400000000000000840
(1 row)

SELECT ST_AsEWKT('POINT( 1 2 3)'::geometry);
  st_asewkt   
--------------
 POINT(1 2 3)
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'POINT( 1 2 3 )'::geometry$$) AS r(c gtype);
                             c                              
------------------------------------------------------------
 0101000080000000000000F03F00000000000000400000000000000840
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('POINT( 1 2 3 )'::geometry) $$) AS r(c gtype);
       c        
----------------
 "POINT(1 2 3)"
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('POINT( 1 2 3 )') $$) AS r(c gtype);
       c        
----------------
 "POINT(1 2 3)"
(1 row)

-- LineString (2D, 4 Points) I/O
SELECT 'LINESTRING (0 0, 1 1, 2 2, 3 3 , 4 4)'::geometry;
                                                                                      geometry                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 01020000000500000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000004000000000000000400000000000000840000000000000084000000000000010400000000000001040
(1 row)

SELECT ST_AsEWKT('LINESTRING (0 0, 1 1, 2 2, 3 3 , 4 4)'::geometry);
            st_asewkt            
---------------------------------
 LINESTRING(0 0,1 1,2 2,3 3,4 4)
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'LINESTRING (0 0, 1 1, 2 2, 3 3 , 4 4)'::geometry$$) AS r(c gtype);
                                                                                         c                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 01020000000500000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000004000000000000000400000000000000840000000000000084000000000000010400000000000001040
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('LINESTRING (0 0, 1 1, 2 2, 3 3 , 4 4)'::geometry) $$) AS r(c gtype);
                 c                 
-----------------------------------
 "LINESTRING(0 0,1 1,2 2,3 3,4 4)"
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('LINESTRING (0 0, 1 1, 2 2, 3 3 , 4 4)') $$) AS r(c gtype);
                 c                 
-----------------------------------
 "LINESTRING(0 0,1 1,2 2,3 3,4 4)"
(1 row)

-- LineString (3D, 4 Points) I/O
SELECT 'LINESTRING (0 0 0, 1 1 1, 2 2 2, 3 3 3, 4 4 4)'::geometry;
                                                                                                                              geometry                                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 010200008005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000004000000000000000400000000000000040000000000000084000000000000008400000000000000840000000000000104000000000000010400000000000001040
(1 row)

SELECT ST_AsEWKT('LINESTRING (0 0 0, 1 1 1, 2 2 2, 3 3 3 , 4 4 4)'::geometry);
                 st_asewkt                 
-------------------------------------------
 LINESTRING(0 0 0,1 1 1,2 2 2,3 3 3,4 4 4)
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'LINESTRING (0 0 0, 1 1 1, 2 2 2, 3 3 3 , 4 4 4)'::geometry$$) AS r(c gtype);
                                                                                                                                 c                                                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 010200008005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000004000000000000000400000000000000040000000000000084000000000000008400000000000000840000000000000104000000000000010400000000000001040
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('LINESTRING (0 0 0, 1 1 1, 2 2 2, 3 3 3, 4 4 4)'::geometry) $$) AS r(c gtype);
                      c                      
---------------------------------------------
 "LINESTRING(0 0 0,1 1 1,2 2 2,3 3 3,4 4 4)"
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('LINESTRING (0 0 0, 1 1 1, 2 2 2, 3 3 3 , 4 4 4)') $$) AS r(c gtype);
                      c                      
---------------------------------------------
 "LINESTRING(0 0 0,1 1 1,2 2 2,3 3 3,4 4 4)"
(1 row)

-- LineString (3D, 2 Points) I/O
SELECT 'LINESTRING (1 2 3, 10 20 30)'::geometry;
                                                      geometry                                                      
--------------------------------------------------------------------------------------------------------------------
 010200008002000000000000000000F03F00000000000000400000000000000840000000000000244000000000000034400000000000003E40
(1 row)

SELECT ST_AsEWKT('LINESTRING (1 2 3, 10 20 30)'::geometry);
         st_asewkt          
----------------------------
 LINESTRING(1 2 3,10 20 30)
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'LINESTRING (1 2 3, 10 20 30)'::geometry$$) AS r(c gtype);
                                                         c                                                          
--------------------------------------------------------------------------------------------------------------------
 010200008002000000000000000000F03F00000000000000400000000000000840000000000000244000000000000034400000000000003E40
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('LINESTRING (1 2 3, 10 20 30)'::geometry) $$) AS r(c gtype);
              c               
------------------------------
 "LINESTRING(1 2 3,10 20 30)"
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('LINESTRING (1 2 3, 10 20 30)') $$) AS r(c gtype);
              c               
------------------------------
 "LINESTRING(1 2 3,10 20 30)"
(1 row)

-- Polygon (2D) I/O
SELECT 'POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry;
                                                                                          geometry                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 010300000001000000050000000000000000000000000000000000000000000000000024400000000000000000000000000000244000000000000024400000000000000000000000000000244000000000000000000000000000000000
(1 row)

SELECT ST_AsEWKT('POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry);
             st_asewkt              
------------------------------------
 POLYGON((0 0,10 0,10 10,0 10,0 0))
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry$$) AS r(c gtype);
                                                                                             c                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 010300000001000000050000000000000000000000000000000000000000000000000024400000000000000000000000000000244000000000000024400000000000000000000000000000244000000000000000000000000000000000
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry) $$) AS r(c gtype);
                  c                   
--------------------------------------
 "POLYGON((0 0,10 0,10 10,0 10,0 0))"
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )') $$) AS r(c gtype);
                  c                   
--------------------------------------
 "POLYGON((0 0,10 0,10 10,0 10,0 0))"
(1 row)

-- Polygon (3D) I/O
SELECT 'POLYGON( (0 0 1 , 10 0 1, 10 10 1, 0 10 1, 0 0 1) )'::geometry;
                                                                                                                                  geometry                                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 0103000080010000000500000000000000000000000000000000000000000000000000F03F00000000000024400000000000000000000000000000F03F00000000000024400000000000002440000000000000F03F00000000000000000000000000002440000000000000F03F00000000000000000000000000000000000000000000F03F
(1 row)

SELECT ST_AsEWKT('POLYGON( (0 0 1 , 10 0 1, 10 10 1, 0 10 1, 0 0 1) )'::geometry);
                  st_asewkt                   
----------------------------------------------
 POLYGON((0 0 1,10 0 1,10 10 1,0 10 1,0 0 1))
(1 row)

SELECT * FROM cypher('postgis', $$RETURN 'POLYGON( (0 0 1 , 10 0 1, 10 10 1, 0 10 1, 0 0 1) )'::geometry$$) AS r(c gtype);
                                                                                                                                     c                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 0103000080010000000500000000000000000000000000000000000000000000000000F03F00000000000024400000000000000000000000000000F03F00000000000024400000000000002440000000000000F03F00000000000000000000000000002440000000000000F03F00000000000000000000000000000000000000000000F03F
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('POLYGON( (0 0 1 , 10 0 1, 10 10 1, 0 10 1, 0 0 1) )'::geometry) $$) AS r(c gtype);
                       c                        
------------------------------------------------
 "POLYGON((0 0 1,10 0 1,10 10 1,0 10 1,0 0 1))"
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEWKT('POLYGON( (0 0 1 , 10 0 1, 10 10 1, 0 10 1, 0 0 1) )') $$) AS r(c gtype);
                       c                        
------------------------------------------------
 "POLYGON((0 0 1,10 0 1,10 10 1,0 10 1,0 0 1))"
(1 row)

--
-- Constructors
--
--
-- ST_MakePoint
--
SELECT ST_MakePoint(1, 0);
                st_makepoint                
--------------------------------------------
 0101000000000000000000F03F0000000000000000
(1 row)

SELECT ST_MakePoint(1, 0, 2);
                        st_makepoint                        
------------------------------------------------------------
 0101000080000000000000F03F00000000000000000000000000000040
(1 row)

SELECT ST_MakePoint(1, 0, 2, 3);
                                st_makepoint                                
----------------------------------------------------------------------------
 01010000C0000000000000F03F000000000000000000000000000000400000000000000840
(1 row)

SELECT * FROM cypher('postgis', $$ RETURN ST_MakePoint(1, 0) $$) AS r(c gtype);
                     c                      
--------------------------------------------
 0101000000000000000000F03F0000000000000000
(1 row)

SELECT * FROM cypher('postgis', $$ RETURN ST_MakePoint(1, 0, 2) $$) AS r(c gtype);
                             c                              
------------------------------------------------------------
 0101000080000000000000F03F00000000000000000000000000000040
(1 row)

SELECT * FROM cypher('postgis', $$ RETURN ST_MakePoint(1, 0, 2, 3) $$) AS r(c gtype);
                                     c                                      
----------------------------------------------------------------------------
 01010000C0000000000000F03F000000000000000000000000000000400000000000000840
(1 row)

--
-- ST_MakePointM
--
SELECT ST_MakePointM(1, 0, 2);
                       st_makepointm                        
------------------------------------------------------------
 0101000040000000000000F03F00000000000000000000000000000040
(1 row)

SELECT * FROM cypher('postgis', $$ RETURN ST_MakePointM(1, 0, 2) $$) AS r(c gtype);
                             c                              
------------------------------------------------------------
 0101000040000000000000F03F00000000000000000000000000000040
(1 row)

--
-- addbbox
--
SELECT ST_AsEwkt(postgis_addbbox('SRID=4326;POINT(1e+15 1e+15)'::geometry));
          st_asewkt           
------------------------------
 SRID=4326;POINT(1e+15 1e+15)
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_AsEwkt(postgis_addbbox('SRID=4326;POINT(1e+15 1e+15)'::geometry)) $$) AS r(c gtype);
               c                
--------------------------------
 "SRID=4326;POINT(1e+15 1e+15)"
(1 row)

--
-- Comparison Operators
--
WITH p0 AS (SELECT 'POINT(0 0)'::geometry::gtype geom),
     p1 AS (SELECT 'POINT(1 1)'::geometry::gtype geom)
SELECT '#4445',
       p0.geom  <    p0.geom,
       p0.geom  <=   p0.geom,
       p0.geom  =    p0.geom,
       p0.geom  >=   p0.geom,
       p0.geom  >    p0.geom,
       p0.geom  <    p1.geom,
       p0.geom  <=   p1.geom,
       p0.geom  =    p1.geom,
       p0.geom  >=   p1.geom,
       p0.geom  >    p1.geom,
       p1.geom  <    p0.geom,
       p1.geom  <=   p0.geom,
       p1.geom  =    p0.geom,
       p1.geom  >=   p0.geom,
       p1.geom  >    p0.geom
FROM p0, p1;
 ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------
 #4445    | f        | t        | t        | t        | f        | t        | t        | f        | f        | f        | f        | f        | f        | t        | t
(1 row)

--
-- 2D Operators
--
-- ~=
select 'POINT(1 1)'::geometry ~= 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry ~= 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry ~= 'POINT(1 1 0)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 1,2 2)'::geometry ~= 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(2 2, 1 1)'::geometry ~= 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry ~= 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(4 5 6, 1 2 3)'::geometry ~= 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry ~= 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry ~= 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1,2 2)'::geometry ~= 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry ~= 'LINESTRING(2 2, 1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry ~= 'LINESTRING(1 1, 2 2, 3 3)'::geometry;
 ?column? 
----------
 f
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry ~= 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry ~= 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry ~= 'POINT(1 1 0)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 1,2 2)'::geometry ~= 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(2 2, 1 1)'::geometry ~= 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry ~= 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(4 5 6, 1 2 3)'::geometry ~= 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry ~= 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry ~= 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1,2 2)'::geometry ~= 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry ~= 'LINESTRING(2 2, 1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry ~= 'LINESTRING(1 1, 2 2, 3 3)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- @
select 'POINT(1 1)'::geometry @ 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry @ 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry @ 'POINT(1 1 0)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 1,2 2)'::geometry @ 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(2 2, 1 1)'::geometry @ 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry @ 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(4 5 6, 1 2 3)'::geometry @ 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry @ 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry @ 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1,2 2)'::geometry @ 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry @ 'LINESTRING(2 2, 1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry @ 'LINESTRING(1 1, 2 2, 3 3)'::geometry;
 ?column? 
----------
 t
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry @ 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry @ 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry @ 'POINT(1 1 0)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 1,2 2)'::geometry @ 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(2 2, 1 1)'::geometry @ 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry @ 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(4 5 6, 1 2 3)'::geometry @ 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry @ 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry @ 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1,2 2)'::geometry @ 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry @ 'LINESTRING(2 2, 1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry @ 'LINESTRING(1 1, 2 2, 3 3)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

-- &<
select 'POINT(1 1)'::geometry &< 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry &< 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry &< 'POINT(1 1 0)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 1,2 2)'::geometry &< 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(2 2, 1 1)'::geometry &< 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry &< 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(4 5 6, 1 2 3)'::geometry &< 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &< 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &< 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1,2 2)'::geometry &< 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry &< 'LINESTRING(2 2, 1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry &< 'LINESTRING(1 1, 2 2, 3 3)'::geometry;
 ?column? 
----------
 t
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry &< 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry &< 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry &< 'POINT(1 1 0)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 1,2 2)'::geometry &< 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(2 2, 1 1)'::geometry &< 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry &< 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(4 5 6, 1 2 3)'::geometry &< 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &< 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &< 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1,2 2)'::geometry &< 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry &< 'LINESTRING(2 2, 1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry &< 'LINESTRING(1 1, 2 2, 3 3)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

--<<|
select 'POINT(1 1)'::geometry <<| 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'POINT(1 1 0)'::geometry <<| 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'POINT(1 1 0)'::geometry <<| 'POINT(1 1 0)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(1 1,2 2)'::geometry <<| 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(2 2, 1 1)'::geometry <<| 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry <<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(4 5 6, 1 2 3)'::geometry <<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry <<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry <<| 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1,2 2)'::geometry <<| 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry <<| 'LINESTRING(2 2, 1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry <<| 'LINESTRING(1 1, 2 2, 3 3)'::geometry;
 ?column? 
----------
 f
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry <<| 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry <<| 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry <<| 'POINT(1 1 0)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 1,2 2)'::geometry <<| 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(2 2, 1 1)'::geometry <<| 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry <<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(4 5 6, 1 2 3)'::geometry <<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry <<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry <<| 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1,2 2)'::geometry <<| 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry <<| 'LINESTRING(2 2, 1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry <<| 'LINESTRING(1 1, 2 2, 3 3)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- &<|
select 'POINT(1 1)'::geometry &<| 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry &<| 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry &<| 'POINT(1 1 0)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 1,2 2)'::geometry &<| 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(2 2, 1 1)'::geometry &<| 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry &<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(4 5 6, 1 2 3)'::geometry &<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &<| 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1,2 2)'::geometry &<| 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry &<| 'LINESTRING(2 2, 1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry &<| 'LINESTRING(1 1, 2 2, 3 3)'::geometry;
 ?column? 
----------
 t
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry &<| 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry &<| 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry &<| 'POINT(1 1 0)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 1,2 2)'::geometry &<| 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(2 2, 1 1)'::geometry &<| 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry &<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(4 5 6, 1 2 3)'::geometry &<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &<| 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &<| 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1,2 2)'::geometry &<| 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry &<| 'LINESTRING(2 2, 1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry &<| 'LINESTRING(1 1, 2 2, 3 3)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

-- &>
select 'POINT(1 1)'::geometry &> 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry &> 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry &> 'POINT(1 1 0)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 1,2 2)'::geometry &> 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(2 2, 1 1)'::geometry &> 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry &> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(4 5 6, 1 2 3)'::geometry &> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &> 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1,2 2)'::geometry &> 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry &> 'LINESTRING(2 2, 1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry &> 'LINESTRING(1 1, 2 2, 3 3)'::geometry;
 ?column? 
----------
 t
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry &> 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry &> 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry &> 'POINT(1 1 0)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 1,2 2)'::geometry &> 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(2 2, 1 1)'::geometry &> 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry &> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(4 5 6, 1 2 3)'::geometry &> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry &> 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1,2 2)'::geometry &> 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry &> 'LINESTRING(2 2, 1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry &> 'LINESTRING(1 1, 2 2, 3 3)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

-- |&>
select 'POINT(1 1)'::geometry |&> 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry |&> 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'POINT(1 1 0)'::geometry |&> 'POINT(1 1 0)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 1,2 2)'::geometry |&> 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(2 2, 1 1)'::geometry |&> 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry |&> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(4 5 6, 1 2 3)'::geometry |&> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry |&> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry |&> 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1,2 2)'::geometry |&> 'POINT(1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry |&> 'LINESTRING(2 2, 1 1)'::geometry;
 ?column? 
----------
 t
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry |&> 'LINESTRING(1 1, 2 2, 3 3)'::geometry;
 ?column? 
----------
 t
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry |&> 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry |&> 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry |&> 'POINT(1 1 0)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 1,2 2)'::geometry |&> 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(2 2, 1 1)'::geometry |&> 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry |&> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(4 5 6, 1 2 3)'::geometry |&> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry |&> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry |&> 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1,2 2)'::geometry |&> 'POINT(1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry |&> 'LINESTRING(2 2, 1 1)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry |&> 'LINESTRING(1 1, 2 2, 3 3)'::geometry
$$) as (c gtype);
  c   
------
 true
(1 row)

--
-- |>>
--
select 'POINT(1 1)'::geometry |>> 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'POINT(1 1 0)'::geometry |>> 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'POINT(1 1 0)'::geometry |>> 'POINT(1 1 0)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(1 1,2 2)'::geometry |>> 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(2 2, 1 1)'::geometry |>> 'MULTIPOINT(1 1,2 2)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry |>> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(4 5 6, 1 2 3)'::geometry |>> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry |>> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry;
 ?column? 
----------
 f
(1 row)

select 'MULTIPOINT(1 2 3, 4 5 6)'::geometry |>> 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1,2 2)'::geometry |>> 'POINT(1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry |>> 'LINESTRING(2 2, 1 1)'::geometry;
 ?column? 
----------
 f
(1 row)

select 'LINESTRING(1 1, 2 2)'::geometry |>> 'LINESTRING(1 1, 2 2, 3 3)'::geometry;
 ?column? 
----------
 f
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry |>> 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry |>> 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1 0)'::geometry |>> 'POINT(1 1 0)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 1,2 2)'::geometry |>> 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(2 2, 1 1)'::geometry |>> 'MULTIPOINT(1 1,2 2)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'GEOMETRYCOLLECTION(POINT( 1 2 3),POINT(4 5 6))'::geometry |>> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(4 5 6, 1 2 3)'::geometry |>> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry |>> 'GEOMETRYCOLLECTION(POINT( 4 5 6),POINT(1 2 3))'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'MULTIPOINT(1 2 3, 4 5 6)'::geometry |>> 'GEOMETRYCOLLECTION(MULTIPOINT(1 2 3, 4 5 6))'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1,2 2)'::geometry |>> 'POINT(1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry |>> 'LINESTRING(2 2, 1 1)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(1 1, 2 2)'::geometry |>> 'LINESTRING(1 1, 2 2, 3 3)'::geometry
$$) as (c gtype);
   c   
-------
 false
(1 row)

--
-- N-D Operators
--
-- nd overlap &&&
select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry &&& 'POINT(3 3 3 5)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN  'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry &&& 'POINT(3 3 5 3)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN  'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry &&& 'POINT(3 5 3 3)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN  'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry &&& 'POINT(5 3 3 3)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN  'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry &&& 'POINT(3 3 3 3)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry &&& 'POINT(2 4 2 4)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry &&& 'POINT(4 2 4 2)'::geometry
$$) as (c gtype); -- t 
  c   
------
 true
(1 row)

-- nd contains ~~
select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~ 'POINT(3 3 3 5)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~ 'POINT(3 3 5 3)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~ 'POINT(3 5 3 3)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~ 'POINT(5 3 3 3)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~ 'POINT(3 3 3 3)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~ 'POINT(2 4 2 4)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~ 'POINT(4 2 4 2)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

-- nd within @@
select * FROM cypher('postgis', $$
    RETURN 'POINT(3 3 3 5)'::geometry @@ 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(3 3 5 3)'::geometry @@ 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(3 5 3 3)'::geometry @@ 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(5 3 3 3)'::geometry @@ 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(3 3 3 3)'::geometry @@ 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(2 4 2 4)'::geometry @@ 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(4 2 4 2)'::geometry @@ 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

-- nd same ~~=
select * FROM cypher('postgis', $$ 
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~= 'POINT(3 3 3 3)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$ 
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~= 'LINESTRING(2 2 2 2, 4 4 4 5)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$ 
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~= 'LINESTRING(2 2 2 2, 4 4 5 4)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$ 
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~= 'LINESTRING(2 2 2 2, 4 5 4 4)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$ 
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~= 'LINESTRING(2 2 2 2, 5 4 4 4)'::geometry
$$) as (c gtype); -- f
   c   
-------
 false
(1 row)

select * FROM cypher('postgis', $$ 
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~= 'LINESTRING(4 4 4 4, 2 2 2 2)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

select * FROM cypher('postgis', $$ 
    RETURN 'LINESTRING(2 2 2 2, 4 4 4 4)'::geometry ~~= 'LINESTRING(2 2 2 4, 2 2 4 2, 2 4 2 2, 4 2 2 2)'::geometry
$$) as (c gtype); -- t
  c   
------
 true
(1 row)

--
-- Point Cordinates
--
--
-- ST_X
--
SELECT ST_X('POINT (0 0)'::geometry);
 st_x 
------
    0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_X('POINT (0 0)'::geometry) $$) AS r(c gtype);
  c  
-----
 0.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN X('POINT (0 0)'::geometry) $$) AS r(c gtype);
  c  
-----
 0.0
(1 row)

SELECT ST_X('POINTZ (1 2 3)'::geometry);
 st_x 
------
    1
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_X('POINTZ (1 2 3)'::geometry) $$) AS r(c gtype);
  c  
-----
 1.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN X('POINTZ (1 2 3)'::geometry) $$) AS r(c gtype);
  c  
-----
 1.0
(1 row)

SELECT ST_X('POINTM (6 7 8)'::geometry);
 st_x 
------
    6
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_X('POINTM (6 7 8)'::geometry) $$) AS r(c gtype);
  c  
-----
 6.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN X('POINTM (6 7 8)'::geometry) $$) AS r(c gtype);
  c  
-----
 6.0
(1 row)

SELECT ST_X('POINTZM (10 11 12 13)'::geometry);
 st_x 
------
   10
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_X('POINTZM (10 11 12 13)'::geometry) $$) AS r(c gtype);
  c   
------
 10.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN X('POINTZM (10 11 12 13)'::geometry) $$) AS r(c gtype);
  c   
------
 10.0
(1 row)

SELECT ST_X('MULTIPOINT ((0 0), (1 1))'::geometry);
ERROR:  Argument to ST_X() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_X('MULTIPOINT ((0 0), (1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_X() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN X('MULTIPOINT ((0 0), (1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_X() must have type POINT
SELECT ST_X('LINESTRING (0 0, 1 1)'::geometry);
ERROR:  Argument to ST_X() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_X('LINESTRING (0 0, 1 1)'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_X() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN X('LINESTRING (0 0, 1 1)'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_X() must have type POINT
SELECT ST_X('GEOMETRYCOLLECTION (POINT(0 0))'::geometry);
ERROR:  Argument to ST_X() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_X('GEOMETRYCOLLECTION (POINT(0 0))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_X() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN X('GEOMETRYCOLLECTION (POINT(0 0))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_X() must have type POINT
SELECT ST_X('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry);
ERROR:  Argument to ST_X() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_X('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_X() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN X('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_X() must have type POINT
--
-- ST_Y
--
SELECT ST_Y('POINT (0 0)'::geometry);
 st_y 
------
    0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_Y('POINT (0 0)'::geometry) $$) AS r(c gtype);
  c  
-----
 0.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN Y('POINT (0 0)'::geometry) $$) AS r(c gtype);
  c  
-----
 0.0
(1 row)

SELECT ST_Y('POINTZ (1 2 3)'::geometry);
 st_y 
------
    2
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_Y('POINTZ (1 2 3)'::geometry) $$) AS r(c gtype);
  c  
-----
 2.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN Y('POINTZ (1 2 3)'::geometry) $$) AS r(c gtype);
  c  
-----
 2.0
(1 row)

SELECT ST_Y('POINTM (6 7 8)'::geometry);
 st_y 
------
    7
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_Y('POINTM (6 7 8)'::geometry) $$) AS r(c gtype);
  c  
-----
 7.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN Y('POINTM (6 7 8)'::geometry) $$) AS r(c gtype);
  c  
-----
 7.0
(1 row)

SELECT ST_Y('POINTZM (10 11 12 13)'::geometry);
 st_y 
------
   11
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_Y('POINTZM (10 11 12 13)'::geometry) $$) AS r(c gtype);
  c   
------
 11.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN Y('POINTZM (10 11 12 13)'::geometry) $$) AS r(c gtype);
  c   
------
 11.0
(1 row)

SELECT ST_Y('MULTIPOINT ((0 0), (1 1))'::geometry);
ERROR:  Argument to ST_Y() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_Y('MULTIPOINT ((0 0), (1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Y() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN Y('MULTIPOINT ((0 0), (1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Y() must have type POINT
SELECT ST_Y('LINESTRING (0 0, 1 1)'::geometry);
ERROR:  Argument to ST_Y() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_Y('LINESTRING (0 0, 1 1)'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Y() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN Y('LINESTRING (0 0, 1 1)'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Y() must have type POINT
SELECT ST_Y('GEOMETRYCOLLECTION (POINT(0 0))'::geometry);
ERROR:  Argument to ST_Y() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_Y('GEOMETRYCOLLECTION (POINT(0 0))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Y() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN Y('GEOMETRYCOLLECTION (POINT(0 0))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Y() must have type POINT
SELECT ST_Y('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry);
ERROR:  Argument to ST_Y() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_Y('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Y() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN Y('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Y() must have type POINT
--
-- ST_Z
--
SELECT ST_Z('POINT (0 0)'::geometry);
 st_z 
------
     
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_Z('POINT (0 0)'::geometry) $$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT * FROM cypher('postgis', $$RETURN Z('POINT (0 0)'::geometry) $$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT ST_Z('POINTZ (1 2 3)'::geometry);
 st_z 
------
    3
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_Z('POINTZ (1 2 3)'::geometry) $$) AS r(c gtype);
  c  
-----
 3.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN Z('POINTZ (1 2 3)'::geometry) $$) AS r(c gtype);
  c  
-----
 3.0
(1 row)

SELECT ST_Z('POINTM (6 7 8)'::geometry);
 st_z 
------
     
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_Z('POINTM (6 7 8)'::geometry) $$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT * FROM cypher('postgis', $$RETURN Z('POINTM (6 7 8)'::geometry) $$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT ST_Z('POINTZM (10 11 12 13)'::geometry);
 st_z 
------
   12
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_Z('POINTZM (10 11 12 13)'::geometry) $$) AS r(c gtype);
  c   
------
 12.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN Z('POINTZM (10 11 12 13)'::geometry) $$) AS r(c gtype);
  c   
------
 12.0
(1 row)

SELECT ST_Z('MULTIPOINT ((0 0), (1 1))'::geometry);
ERROR:  Argument to ST_Z() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_Z('MULTIPOINT ((0 0), (1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Z() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN Z('MULTIPOINT ((0 0), (1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Z() must have type POINT
SELECT ST_Z('LINESTRING (0 0, 1 1)'::geometry);
ERROR:  Argument to ST_Z() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_Z('LINESTRING (0 0, 1 1)'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Z() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN Z('LINESTRING (0 0, 1 1)'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Z() must have type POINT
SELECT ST_Z('GEOMETRYCOLLECTION (POINT(0 0))'::geometry);
ERROR:  Argument to ST_Z() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_Z('GEOMETRYCOLLECTION (POINT(0 0))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Z() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN Z('GEOMETRYCOLLECTION (POINT(0 0))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Z() must have type POINT
SELECT ST_Z('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry);
ERROR:  Argument to ST_Z() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_Z('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Z() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN Z('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_Z() must have type POINT
--
-- ST_M
--
SELECT ST_M('POINT (0 0)'::geometry);
 st_m 
------
     
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_M('POINT (0 0)'::geometry) $$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT * FROM cypher('postgis', $$RETURN M('POINT (0 0)'::geometry) $$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT ST_M('POINTZ (1 2 3)'::geometry);
 st_m 
------
     
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_M('POINTZ (1 2 3)'::geometry) $$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT * FROM cypher('postgis', $$RETURN M('POINTZ (1 2 3)'::geometry) $$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT ST_M('POINTM (6 7 8)'::geometry);
 st_m 
------
    8
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_M('POINTM (6 7 8)'::geometry) $$) AS r(c gtype);
  c  
-----
 8.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN M('POINTM (6 7 8)'::geometry) $$) AS r(c gtype);
  c  
-----
 8.0
(1 row)

SELECT ST_M('POINTZM (10 11 12 13)'::geometry);
 st_m 
------
   13
(1 row)

SELECT * FROM cypher('postgis', $$RETURN ST_M('POINTZM (10 11 12 13)'::geometry) $$) AS r(c gtype);
  c   
------
 13.0
(1 row)

SELECT * FROM cypher('postgis', $$RETURN M('POINTZM (10 11 12 13)'::geometry) $$) AS r(c gtype);
  c   
------
 13.0
(1 row)

SELECT ST_M('MULTIPOINT ((0 0), (1 1))'::geometry);
ERROR:  Argument to ST_M() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_M('MULTIPOINT ((0 0), (1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_M() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN M('MULTIPOINT ((0 0), (1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_M() must have type POINT
SELECT ST_M('LINESTRING (0 0, 1 1)'::geometry);
ERROR:  Argument to ST_M() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_M('LINESTRING (0 0, 1 1)'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_M() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN M('LINESTRING (0 0, 1 1)'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_M() must have type POINT
SELECT ST_M('GEOMETRYCOLLECTION (POINT(0 0))'::geometry);
ERROR:  Argument to ST_M() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_M('GEOMETRYCOLLECTION (POINT(0 0))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_M() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN M('GEOMETRYCOLLECTION (POINT(0 0))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_M() must have type POINT
SELECT ST_M('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry);
ERROR:  Argument to ST_M() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN ST_M('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_M() must have type POINT
SELECT * FROM cypher('postgis', $$RETURN M('GEOMETRYCOLLECTION (POINT(0 1), LINESTRING(0 0, 1 1))'::geometry) $$) AS r(c gtype);
ERROR:  Argument to ST_M() must have type POINT
--
-- Affines
--
-- ST_Scale
select ST_asewkt(ST_Scale('POINT(1 1)'::geometry, 5, 5));
 st_asewkt  
------------
 POINT(5 5)
(1 row)

select ST_asewkt(ST_Scale('POINT(1 1)'::geometry, 3, 2));
 st_asewkt  
------------
 POINT(3 2)
(1 row)

select ST_asewkt(ST_Scale('POINT(10 20 -5)'::geometry, 4, 2, -8));
    st_asewkt    
-----------------
 POINT(40 40 40)
(1 row)

select ST_asewkt(ST_Scale('POINT(10 20 -5 3)'::geometry, ST_MakePoint(4, 2, -8)));
     st_asewkt     
-------------------
 POINT(40 40 40 3)
(1 row)

select ST_asewkt(ST_Scale('POINT(-2 -1 3 2)'::geometry, ST_MakePointM(-2, 3, 4)));
    st_asewkt    
-----------------
 POINT(4 -3 3 8)
(1 row)

select ST_asewkt(ST_Scale('POINT(10 20 -5 3)'::geometry, ST_MakePoint(-3, 2, -1, 3)));
     st_asewkt     
-------------------
 POINT(-30 40 5 9)
(1 row)

select st_astext(st_scale('LINESTRING(1 1, 2 2)'::geometry, 'POINT(2 2)'::geometry, 'POINT(1 1)'::geometry));
      st_astext      
---------------------
 LINESTRING(1 1,3 3)
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_asewkt(ST_Scale('POINT(1 1)'::geometry, 5, 5))
$$) AS (c gtype);
ERROR:  cannot cast gtype integer to type geometry
select * FROM cypher('postgis', $$
    RETURN ST_asewkt(ST_Scale('POINT(1 1)'::geometry, 3, 2))
$$) AS (c gtype);
ERROR:  cannot cast gtype integer to type geometry
select * FROM cypher('postgis', $$
    RETURN ST_asewkt(ST_Scale('POINT(10 20 -5)'::geometry, 4, 2, -8))
$$) AS (c gtype);
         c         
-------------------
 "POINT(40 40 40)"
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_asewkt(ST_Scale('POINT(10 20 -5 3)'::geometry, ST_MakePoint(4, 2, -8)))
$$) AS (c gtype);
          c          
---------------------
 "POINT(40 40 40 3)"
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_asewkt(ST_Scale('POINT(-2 -1 3 2)'::geometry, ST_MakePointM(-2, 3, 4)))
$$) AS (c gtype);
         c         
-------------------
 "POINT(4 -3 3 8)"
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_asewkt(ST_Scale('POINT(10 20 -5 3)'::geometry, ST_MakePoint(-3, 2, -1, 3)))
$$) AS (c gtype);
          c          
---------------------
 "POINT(-30 40 5 9)"
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_asewkt(st_scale('LINESTRING(1 1, 2 2)'::geometry, 'POINT(2 2)'::geometry, 'POINT(1 1)'::geometry))
$$) AS (c gtype);
           c           
-----------------------
 "LINESTRING(1 1,3 3)"
(1 row)

--
-- Measures
--
--
-- ST_IsPolygonCW
--
-- Non-applicable types
SELECT ST_IsPolygonCW('POINT (0 0)'::geometry);
 st_ispolygoncw 
----------------
 t
(1 row)

SELECT ST_IsPolygonCW('MULTIPOINT ((0 0), (1 1))'::geometry);
 st_ispolygoncw 
----------------
 t
(1 row)

SELECT ST_IsPolygonCW('LINESTRING (1 1, 2 2)'::geometry);
 st_ispolygoncw 
----------------
 t
(1 row)

SELECT ST_IsPolygonCW('MULTILINESTRING ((1 1, 2 2), (3 3, 0 0))'::geometry);
 st_ispolygoncw 
----------------
 t
(1 row)

-- EMPTY handling
SELECT ST_IsPolygonCW('POLYGON EMPTY'::geometry);
 st_ispolygoncw 
----------------
 t
(1 row)

-- Single polygon, ccw exterior ring only
SELECT ST_IsPolygonCW('POLYGON ((0 0, 1 0, 1 1, 0 0))'::geometry);
 st_ispolygoncw 
----------------
 f
(1 row)

-- Single polygon, cw exterior ring only
SELECT ST_IsPolygonCW('POLYGON ((0 0, 1 1, 1 0, 0 0))'::geometry);
 st_ispolygoncw 
----------------
 t
(1 row)

-- Single polygon, ccw exterior ring, cw interior rings
SELECT ST_IsPolygonCW('POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0), (1 1, 1 2, 2 2, 1 1), (5 5, 5 7, 7 7, 5 5))'::geometry);
 st_ispolygoncw 
----------------
 f
(1 row)

-- Single polygon, cw exterior ring, ccw interior rings
SELECT ST_IsPolygonCW( 'POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (1 1, 2 2, 1 2, 1 1), (5 5, 7 7, 5 7, 5 5))'::geometry);
 st_ispolygoncw 
----------------
 t
(1 row)

-- Single polygon, ccw exerior ring, mixed interior rings
SELECT ST_IsPolygonCW( 'POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0), (1 1, 1 2, 2 2, 1 1), (5 5, 7 7, 5 7, 5 5))'::geometry);
 st_ispolygoncw 
----------------
 f
(1 row)

-- Single polygon, cw exterior ring, mixed interior rings
SELECT ST_IsPolygonCW( 'POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (1 1, 2 2, 1 2, 1 1), (5 5, 5 7, 7 7, 5 5))'::geometry);
 st_ispolygoncw 
----------------
 f
(1 row)

-- MultiPolygon, ccw exterior rings only
SELECT ST_IsPolygonCW( 'MULTIPOLYGON (((0 0, 1 0, 1 1, 0 0)), ((100 0, 101 0, 101 1, 100 0)))'::geometry);
 st_ispolygoncw 
----------------
 f
(1 row)

-- MultiPolygon, cw exterior rings only
SELECT ST_IsPolygonCW( 'MULTIPOLYGON (((0 0, 1 1, 1 0, 0 0)), ((100 0, 101 1, 101 0, 100 0)))'::geometry);
 st_ispolygoncw 
----------------
 t
(1 row)

-- MultiPolygon, mixed exterior rings
SELECT ST_IsPolygonCW( 'MULTIPOLYGON (((0 0, 1 0, 1 1, 0 0)), ((100 0, 101 1, 101 0, 100 0)))'::geometry);
 st_ispolygoncw 
----------------
 f
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW('POINT (0 0)'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW('MULTIPOINT ((0 0), (1 1))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW('LINESTRING (1 1, 2 2)'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW('MULTILINESTRING ((1 1, 2 2), (3 3, 0 0))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- EMPTY handling
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW('POLYGON EMPTY'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- Single polygon, ccw exterior ring only
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW('POLYGON ((0 0, 1 0, 1 1, 0 0))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- Single polygon, cw exterior ring only
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW('POLYGON ((0 0, 1 1, 1 0, 0 0))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- Single polygon, ccw exterior ring, cw interior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW('POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0), (1 1, 1 2, 2 2, 1 1), (5 5, 5 7, 7 7, 5 5))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- Single polygon, cw exterior ring, ccw interior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW( 'POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (1 1, 2 2, 1 2, 1 1), (5 5, 7 7, 5 7, 5 5))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- Single polygon, ccw exerior ring, mixed interior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW( 'POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0), (1 1, 1 2, 2 2, 1 1), (5 5, 7 7, 5 7, 5 5))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- Single polygon, cw exterior ring, mixed interior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW( 'POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (1 1, 2 2, 1 2, 1 1), (5 5, 5 7, 7 7, 5 5))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- MultiPolygon, ccw exterior rings only
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW( 'MULTIPOLYGON (((0 0, 1 0, 1 1, 0 0)), ((100 0, 101 0, 101 1, 100 0)))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- MultiPolygon, cw exterior rings only
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW( 'MULTIPOLYGON (((0 0, 1 1, 1 0, 0 0)), ((100 0, 101 1, 101 0, 100 0)))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- MultiPolygon, mixed exterior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCW( 'MULTIPOLYGON (((0 0, 1 0, 1 1, 0 0)), ((100 0, 101 1, 101 0, 100 0)))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

--
-- ST_IsPolygonCCW
--
-- Non-applicable types
SELECT ST_IsPolygonCCW('POINT (0 0)'::geometry);
 st_ispolygonccw 
-----------------
 t
(1 row)

SELECT ST_IsPolygonCCW('MULTIPOINT ((0 0), (1 1))'::geometry);
 st_ispolygonccw 
-----------------
 t
(1 row)

SELECT ST_IsPolygonCCW('LINESTRING (1 1, 2 2)'::geometry);
 st_ispolygonccw 
-----------------
 t
(1 row)

SELECT ST_IsPolygonCCW('MULTILINESTRING ((1 1, 2 2), (3 3, 0 0))'::geometry);
 st_ispolygonccw 
-----------------
 t
(1 row)

-- EMPTY handling
SELECT ST_IsPolygonCCW('POLYGON EMPTY'::geometry);
 st_ispolygonccw 
-----------------
 t
(1 row)

-- Single polygon, ccw exterior ring only
SELECT ST_IsPolygonCCW('POLYGON ((0 0, 1 0, 1 1, 0 0))'::geometry);
 st_ispolygonccw 
-----------------
 t
(1 row)

-- Single polygon, cw exterior ring only
SELECT ST_IsPolygonCCW('POLYGON ((0 0, 1 1, 1 0, 0 0))'::geometry);
 st_ispolygonccw 
-----------------
 f
(1 row)

-- Single polygon, ccw exterior ring, cw interior rings
SELECT ST_IsPolygonCCW('POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0), (1 1, 1 2, 2 2, 1 1), (5 5, 5 7, 7 7, 5 5))'::geometry);
 st_ispolygonccw 
-----------------
 t
(1 row)

-- Single polygon, cw exterior ring, ccw interior rings
SELECT ST_IsPolygonCCW( 'POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (1 1, 2 2, 1 2, 1 1), (5 5, 7 7, 5 7, 5 5))'::geometry);
 st_ispolygonccw 
-----------------
 f
(1 row)

-- Single polygon, ccw exerior ring, mixed interior rings
SELECT ST_IsPolygonCCW( 'POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0), (1 1, 1 2, 2 2, 1 1), (5 5, 7 7, 5 7, 5 5))'::geometry);
 st_ispolygonccw 
-----------------
 f
(1 row)

-- Single polygon, cw exterior ring, mixed interior rings
SELECT ST_IsPolygonCCW( 'POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (1 1, 2 2, 1 2, 1 1), (5 5, 5 7, 7 7, 5 5))'::geometry);
 st_ispolygonccw 
-----------------
 f
(1 row)

-- MultiPolygon, ccw exterior rings only
SELECT ST_IsPolygonCCW( 'MULTIPOLYGON (((0 0, 1 0, 1 1, 0 0)), ((100 0, 101 0, 101 1, 100 0)))'::geometry);
 st_ispolygonccw 
-----------------
 t
(1 row)

-- MultiPolygon, cw exterior rings only
SELECT ST_IsPolygonCCW( 'MULTIPOLYGON (((0 0, 1 1, 1 0, 0 0)), ((100 0, 101 1, 101 0, 100 0)))'::geometry);
 st_ispolygonccw 
-----------------
 f
(1 row)

-- MultiPolygon, mixed exterior rings
SELECT ST_IsPolygonCCW( 'MULTIPOLYGON (((0 0, 1 0, 1 1, 0 0)), ((100 0, 101 1, 101 0, 100 0)))'::geometry);
 st_ispolygonccw 
-----------------
 f
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW('POINT (0 0)'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW('MULTIPOINT ((0 0), (1 1))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW('LINESTRING (1 1, 2 2)'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW('MULTILINESTRING ((1 1, 2 2), (3 3, 0 0))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- EMPTY handling
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW('POLYGON EMPTY'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- Single polygon, ccw exterior ring only
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW('POLYGON ((0 0, 1 0, 1 1, 0 0))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- Single polygon, cw exterior ring only
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW('POLYGON ((0 0, 1 1, 1 0, 0 0))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- Single polygon, ccw exterior ring, cw interior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW('POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0), (1 1, 1 2, 2 2, 1 1), (5 5, 5 7, 7 7, 5 5))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- Single polygon, cw exterior ring, ccw interior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW( 'POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (1 1, 2 2, 1 2, 1 1), (5 5, 7 7, 5 7, 5 5))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- Single polygon, ccw exerior ring, mixed interior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW( 'POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0), (1 1, 1 2, 2 2, 1 1), (5 5, 7 7, 5 7, 5 5))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- Single polygon, cw exterior ring, mixed interior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW( 'POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0), (1 1, 2 2, 1 2, 1 1), (5 5, 5 7, 7 7, 5 5))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- MultiPolygon, ccw exterior rings only
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW( 'MULTIPOLYGON (((0 0, 1 0, 1 1, 0 0)), ((100 0, 101 0, 101 1, 100 0)))'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- MultiPolygon, cw exterior rings only
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW( 'MULTIPOLYGON (((0 0, 1 1, 1 0, 0 0)), ((100 0, 101 1, 101 0, 100 0)))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

-- MultiPolygon, mixed exterior rings
SELECT * FROM cypher('postgis', $$
    RETURN ST_IsPolygonCCW( 'MULTIPOLYGON (((0 0, 1 0, 1 1, 0 0)), ((100 0, 101 1, 101 0, 100 0)))'::geometry)
$$) as (c gtype);
   c   
-------
 false
(1 row)

--
-- ST_DistanceSpheroid
--
SELECT round(ST_DistanceSpheroid('MULTIPOLYGON(((-10 40,-10 55,-10 70,5 40,-10 40)))'::geometry,
		                 'MULTIPOINT(20 40,20 55,20 70,35 40,35 55,35 70,50 40,50 55,50 70)',
			         'SPHEROID["GRS_1980",6378137,298.257222101]'));
  round  
---------
 1121395
(1 row)

SELECT round(ST_DistanceSpheroid('MULTIPOLYGON(((-10 40,-10 55,-10 70,5 40,-10 40)))'::geometry,
                                 'MULTIPOINT(20 40,20 55,20 70,35 40,35 55,35 70,50 40,50 55,50 70)'));
  round  
---------
 1121395
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN round(ST_DistanceSpheroid('MULTIPOLYGON(((-10 40,-10 55,-10 70,5 40,-10 40)))'::geometry,
                                 'MULTIPOINT(20 40,20 55,20 70,35 40,35 55,35 70,50 40,50 55,50 70)',
                                 'SPHEROID["GRS_1980",6378137,298.257222101]'))
$$) as (c gtype);
     c     
-----------
 1121395.0
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN round(ST_DistanceSpheroid('MULTIPOLYGON(((-10 40,-10 55,-10 70,5 40,-10 40)))'::geometry,
                                 'MULTIPOINT(20 40,20 55,20 70,35 40,35 55,35 70,50 40,50 55,50 70)'))
$$) as (c gtype);
     c     
-----------
 1121395.0
(1 row)

--
-- Temporal
--
--
-- ST_ClosestPointOfApproach
--
-- Converging
select ST_ClosestPointOfApproach( 'LINESTRINGZM(0 0 0 0, 10 10 10 10)', 'LINESTRINGZM(0 0 0 1, 10 10 10 10)'::geometry);
 st_closestpointofapproach 
---------------------------
                        10
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_ClosestPointOfApproach( 'LINESTRINGZM(0 0 0 0, 10 10 10 10)'::geometry, 'LINESTRINGZM(0 0 0 1, 10 10 10 10)')
$$) as (c gtype);
  c   
------
 10.0
(1 row)

-- Following
select ST_ClosestPointOfApproach( 'LINESTRINGZM(0 0 0 0, 10 10 10 10)', 'LINESTRINGZM(0 0 0 5, 10 10 10 15)'::geometry);
 st_closestpointofapproach 
---------------------------
                         5
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_ClosestPointOfApproach( 'LINESTRINGZM(0 0 0 0, 10 10 10 10)', 'LINESTRINGZM(0 0 0 5, 10 10 10 15)'::geometry)
$$) as (c gtype);
  c  
-----
 5.0
(1 row)

-- Crossing
select ST_ClosestPointOfApproach( 'LINESTRINGZM(0 0 0 0, 0 0 0 10)', 'LINESTRINGZM(-30 0 5 4, 10 0 5 6)'::geometry);
 st_closestpointofapproach 
---------------------------
                       5.5
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_ClosestPointOfApproach( 'LINESTRINGZM(0 0 0 0, 0 0 0 10)', 'LINESTRINGZM(-30 0 5 4, 10 0 5 6)'::geometry)
$$) as (c gtype);
  c  
-----
 5.5
(1 row)

-- Meeting
select ST_ClosestPointOfApproach( 'LINESTRINGZM(0 0 0 0, 0 0 0 10)', 'LINESTRINGZM(0 5 0 10, 10 0 5 11)'::geometry);
 st_closestpointofapproach 
---------------------------
                        10
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_ClosestPointOfApproach( 'LINESTRINGZM(0 0 0 0, 0 0 0 10)', 'LINESTRINGZM(0 5 0 10, 10 0 5 11)'::geometry)
$$) as (c gtype);
  c   
------
 10.0
(1 row)

-- Disjoint
select ST_ClosestPointOfApproach( 'LINESTRINGM(0 0 0, 0 0 4)', 'LINESTRINGM(0 0 5, 0 0 10)'::geometry);
 st_closestpointofapproach 
---------------------------
                          
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_ClosestPointOfApproach('LINESTRINGM(0 0 0, 0 0 4)', 'LINESTRINGM(0 0 5, 0 0 10)'::geometry)
$$) as (c gtype);
 c 
---
 
(1 row)

--
-- ST_DistanceCPA
--
-- Converging
select ST_DistanceCPA( 'LINESTRINGZM(0 0 0 0, 10 10 10 10)', 'LINESTRINGZM(0 0 0 1, 10 10 10 10)'::geometry);
 st_distancecpa 
----------------
              0
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_DistanceCPA( 'LINESTRINGZM(0 0 0 0, 10 10 10 10)'::geometry, 'LINESTRINGZM(0 0 0 1, 10 10 10 10)')
$$) as (c gtype);
  c  
-----
 0.0
(1 row)

-- Following
select ST_DistanceCPA( 'LINESTRINGZM(0 0 0 0, 10 10 10 10)', 'LINESTRINGZM(0 0 0 5, 10 10 10 15)'::geometry);
  st_distancecpa  
------------------
 8.66025403784439
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_DistanceCPA( 'LINESTRINGZM(0 0 0 0, 10 10 10 10)', 'LINESTRINGZM(0 0 0 5, 10 10 10 15)'::geometry)
$$) as (c gtype);
        c         
------------------
 8.66025403784439
(1 row)

-- Crossing
select ST_DistanceCPA( 'LINESTRINGZM(0 0 0 0, 0 0 0 10)', 'LINESTRINGZM(-30 0 5 4, 10 0 5 6)'::geometry);
 st_distancecpa 
----------------
              5
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_DistanceCPA( 'LINESTRINGZM(0 0 0 0, 0 0 0 10)', 'LINESTRINGZM(-30 0 5 4, 10 0 5 6)'::geometry)
$$) as (c gtype);
  c  
-----
 5.0
(1 row)

-- Meeting
select ST_DistanceCPA( 'LINESTRINGZM(0 0 0 0, 0 0 0 10)', 'LINESTRINGZM(0 5 0 10, 10 0 5 11)'::geometry);
 st_distancecpa 
----------------
              5
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_DistanceCPA( 'LINESTRINGZM(0 0 0 0, 0 0 0 10)', 'LINESTRINGZM(0 5 0 10, 10 0 5 11)'::geometry)
$$) as (c gtype);
  c  
-----
 5.0
(1 row)

-- Disjoint
select ST_DistanceCPA( 'LINESTRINGM(0 0 0, 0 0 4)', 'LINESTRINGM(0 0 5, 0 0 10)'::geometry);
 st_distancecpa 
----------------
               
(1 row)

select * FROM cypher('postgis', $$
    RETURN ST_DistanceCPA('LINESTRINGM(0 0 0, 0 0 4)', 'LINESTRINGM(0 0 5, 0 0 10)'::geometry)
$$) as (c gtype);
 c 
---
 
(1 row)

--
-- |=| Operator
--
-- Converging
select 'LINESTRINGZM(0 0 0 0, 10 10 10 10)' |=| 'LINESTRINGZM(0 0 0 1, 10 10 10 10)'::geometry;
 ?column? 
----------
        0
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRINGZM(0 0 0 0, 10 10 10 10)'::geometry |=| 'LINESTRINGZM(0 0 0 1, 10 10 10 10)'
$$) as (c gtype);
  c  
-----
 0.0
(1 row)

-- Following
select 'LINESTRINGZM(0 0 0 0, 10 10 10 10)' |=| 'LINESTRINGZM(0 0 0 5, 10 10 10 15)'::geometry;
     ?column?     
------------------
 8.66025403784439
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRINGZM(0 0 0 0, 10 10 10 10)' |=| 'LINESTRINGZM(0 0 0 5, 10 10 10 15)'::geometry
$$) as (c gtype);
        c         
------------------
 8.66025403784439
(1 row)

-- Crossing
select 'LINESTRINGZM(0 0 0 0, 0 0 0 10)' |=| 'LINESTRINGZM(-30 0 5 4, 10 0 5 6)'::geometry;
 ?column? 
----------
        5
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRINGZM(0 0 0 0, 0 0 0 10)' |=| 'LINESTRINGZM(-30 0 5 4, 10 0 5 6)'::geometry
$$) as (c gtype);
  c  
-----
 5.0
(1 row)

-- Meeting 
select 'LINESTRINGZM(0 0 0 0, 0 0 0 10)' |=| 'LINESTRINGZM(0 5 0 10, 10 0 5 11)'::geometry;
 ?column? 
----------
        5
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRINGZM(0 0 0 0, 0 0 0 10)' |=| 'LINESTRINGZM(0 5 0 10, 10 0 5 11)'::geometry
$$) as (c gtype);
  c  
-----
 5.0
(1 row)

-- Disjoint
select 'LINESTRINGM(0 0 0, 0 0 4)' |=| 'LINESTRINGM(0 0 5, 0 0 10)'::geometry;
 ?column? 
----------
         
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'LINESTRINGM(0 0 0, 0 0 4)' |=| 'LINESTRINGM(0 0 5, 0 0 10)'::geometry
$$) as (c gtype);
 c 
---
 
(1 row)

--
-- ST_IsValidTrajectory
--
SELECT ST_IsValidTrajectory('POINTM(0 0 0)'::geometry);
NOTICE:  Geometry is not a LINESTRING
 st_isvalidtrajectory 
----------------------
 f
(1 row)

SELECT ST_IsValidTrajectory('LINESTRINGZ(0 0 0,1 1 1)'::geometry);
NOTICE:  Line does not have M dimension
 st_isvalidtrajectory 
----------------------
 f
(1 row)

SELECT ST_IsValidTrajectory('LINESTRINGM(0 0 0,1 1 0)'::geometry);
NOTICE:  Measure of vertex 1 (0) not bigger than measure of vertex 0 (0)
 st_isvalidtrajectory 
----------------------
 f
(1 row)

SELECT ST_IsValidTrajectory('LINESTRINGM(0 0 1,1 1 0)'::geometry);
NOTICE:  Measure of vertex 1 (0) not bigger than measure of vertex 0 (1)
 st_isvalidtrajectory 
----------------------
 f
(1 row)

SELECT ST_IsValidTrajectory('LINESTRINGM(0 0 0,1 1 1,1 1 2,1 0 1)'::geometry);
NOTICE:  Measure of vertex 3 (1) not bigger than measure of vertex 2 (2)
 st_isvalidtrajectory 
----------------------
 f
(1 row)

SELECT ST_IsValidTrajectory('LINESTRINGM(0 0 0,1 1 1)'::geometry);
 st_isvalidtrajectory 
----------------------
 t
(1 row)

SELECT ST_IsValidTrajectory('LINESTRINGM EMPTY'::geometry);
 st_isvalidtrajectory 
----------------------
 t
(1 row)

SELECT ST_IsValidTrajectory('LINESTRINGM(0 0 0,1 1 1,1 1 2)'::geometry);
 st_isvalidtrajectory 
----------------------
 t
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsValidTrajectory('POINTM(0 0 0)'::geometry)
$$) as (c gtype);
NOTICE:  Geometry is not a LINESTRING
   c   
-------
 false
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsValidTrajectory('LINESTRINGZ(0 0 0,1 1 1)'::geometry)
$$) as (c gtype);
NOTICE:  Line does not have M dimension
   c   
-------
 false
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsValidTrajectory('LINESTRINGM(0 0 0,1 1 0)'::geometry)
$$) as (c gtype);
NOTICE:  Measure of vertex 1 (0) not bigger than measure of vertex 0 (0)
   c   
-------
 false
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsValidTrajectory('LINESTRINGM(0 0 1,1 1 0)'::geometry)
$$) as (c gtype);
NOTICE:  Measure of vertex 1 (0) not bigger than measure of vertex 0 (1)
   c   
-------
 false
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsValidTrajectory('LINESTRINGM(0 0 0,1 1 1,1 1 2,1 0 1)'::geometry)
$$) as (c gtype);
NOTICE:  Measure of vertex 3 (1) not bigger than measure of vertex 2 (2)
   c   
-------
 false
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsValidTrajectory('LINESTRINGM(0 0 0,1 1 1)'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsValidTrajectory('LINESTRINGM EMPTY'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_IsValidTrajectory('LINESTRINGM(0 0 0,1 1 1,1 1 2)'::geometry)
$$) as (c gtype);
  c   
------
 true
(1 row)

--
-- ST_CPAWithin
--
SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 0.0);
 st_cpawithin 
--------------
 t
(1 row)

SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 1.0);
 st_cpawithin 
--------------
 t
(1 row)

SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 0.5);
 st_cpawithin 
--------------
 t
(1 row)

SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 1);
 st_cpawithin 
--------------
 t
(1 row)

SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 2);
 st_cpawithin 
--------------
 t
(1 row)

SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 1.9);
 st_cpawithin 
--------------
 t
(1 row)

SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 2);
 st_cpawithin 
--------------
 t
(1 row)

SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 2.0001);
 st_cpawithin 
--------------
 t
(1 row)

-- temporary disjoint
SELECT ST_CPAWithin( 'LINESTRINGM(0 0 0, 10 0 10)'::geometry ,'LINESTRINGM(10 0 11, 10 10 20)'::geometry, 1e15);
 st_cpawithin 
--------------
 f
(1 row)

SELECT ST_CPAWithin( 'LINESTRING(0 0 0, 1 0 0)'::geometry ,'LINESTRING(0 0 3 0, 1 0 2 1)'::geometry, 1e16);
ERROR:  Both input geometries must have a measure dimension
SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 0.0)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 1.0)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 0.5)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 1)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 2)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 1.9)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 2)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 1 0 1)'::geometry ,'LINESTRINGM(0 0 0, 1 0 1)'::geometry, 2.0001)
$$) as (c gtype);
  c   
------
 true
(1 row)

-- temporary disjoint
SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRINGM(0 0 0, 10 0 10)'::geometry ,'LINESTRINGM(10 0 11, 10 10 20)'::geometry, 1e15)
$$) as (c gtype);
  c   
------
 true
(1 row)

SELECT  * FROM cypher('postgis', $$
    RETURN ST_CPAWithin( 'LINESTRING(0 0 0, 1 0 0)'::geometry ,'LINESTRING(0 0 3 0, 1 0 2 1)'::geometry, 1e16)
$$) as (c gtype); --XXX
NOTICE:  Line does not have M dimension
   c   
-------
 false
(1 row)

--
-- GEOS
--
--
-- ST_Intersection
--
SELECT ST_Intersection('MULTIPOINT ((0 0), (1 1))'::geometry, 'MULTIPOINT ((0 0), (1 1))'::geometry);
                                            st_intersection                                             
--------------------------------------------------------------------------------------------------------
 0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F
(1 row)

SELECT ST_AsEWKT(ST_Intersection('MULTIPOINT ((0 0), (1 1))'::geometry, 'MULTIPOINT ((0 0), (1 1))'::geometry));
      st_asewkt      
---------------------
 MULTIPOINT(0 0,1 1)
(1 row)

SELECT * FROM cypher('postgis', $$
     RETURN ST_Intersection('MULTIPOINT ((0 0), (1 1))'::geometry, 'MULTIPOINT ((0 0), (1 1))'::geometry, -1.0)
$$) AS r(c gtype);
                                                   c                                                    
--------------------------------------------------------------------------------------------------------
 0104000000020000000101000000000000000000000000000000000000000101000000000000000000F03F000000000000F03F
(1 row)

SELECT * FROM cypher('postgis', $$
     RETURN ST_AsEWKT(ST_Intersection('MULTIPOINT ((0 0), (1 1))'::geometry, 'MULTIPOINT ((0 0), (1 1))'::geometry, -1.0))
$$) AS r(c gtype);
           c           
-----------------------
 "MULTIPOINT(0 0,1 1)"
(1 row)

SELECT * FROM cypher('postgis', $$
     RETURN ST_AsEWKT(ST_Intersection('MULTIPOINT ((2 2), (5 1))'::geometry, 'MULTIPOINT ((0 0), (1 1))'::geometry, -1.0))
$$) AS r(c gtype);
       c       
---------------
 "POINT EMPTY"
(1 row)

SELECT * FROM cypher('postgis', $$
     RETURN ST_AsEWKT(ST_Intersection('MULTIPOINT ((2 2), (5 1))'::geometry, 'MULTIPOINT ((0 0), (1 1))'::geometry))
$$) AS r(c gtype);
       c       
---------------
 "POINT EMPTY"
(1 row)

--
-- Algorithms
-- 
--
-- ST_Simplify
--
SELECT ST_AsEWKT(ST_Simplify('POLYGON((0 0,1 1,1 3,0 4,-2 3,-1 1,0 0))'::geometry, 1));
          st_asewkt          
-----------------------------
 POLYGON((0 0,0 4,-2 3,0 0))
(1 row)

SELECT ST_AsEWKT(ST_Simplify('POLYGON((0 0,1 1,1 3,2 3,2 0,0 0))'::geometry, 1));
         st_asewkt          
----------------------------
 POLYGON((0 0,2 3,2 0,0 0))
(1 row)

SELECT * FROM cypher('postgis', $$
     RETURN ST_AsEWKT(ST_Simplify('POLYGON((0 0,1 1,1 3,0 4,-2 3,-1 1,0 0))', 1))
$$) AS r(c gtype);
               c               
-------------------------------
 "POLYGON((0 0,0 4,-2 3,0 0))"
(1 row)

SELECT * FROM cypher('postgis', $$
     RETURN ST_AsEWKT(ST_Simplify('POLYGON((0 0,1 1,1 3,2 3,2 0,0 0))'::geometry, 1))
$$) AS r(c gtype);
              c               
------------------------------
 "POLYGON((0 0,2 3,2 0,0 0))"
(1 row)

/*
 * 3D Functions
 */
--3D Distance functions
SELECT * FROM cypher('postgis', $$
    WITH 'POINT(1 1 1)'::geometry as a, 'POINT(3 2 7)'::geometry as b
    RETURN 	ST_3DDistance(a,b),
		    ST_3DMaxDistance(a,b)::numeric,
			ST_3DDWithin(a,b,5),
			ST_3DDFullyWithin(a,b,5),
			ST_ASEWKT(ST_3DShortestline(a,b)),
			ST_ASEWKT(ST_3DClosestpoint(a,b)),
			ST_ASEWKT(ST_3DLongestline(a,b))
$$ ) as a(distance gtype, max_distance gtype, within gtype, fully_within gtype, shortest gtype, closest gtype, longest gtype);
     distance     |       max_distance        | within | fully_within |         shortest          |    closest     |          longest          
------------------+---------------------------+--------+--------------+---------------------------+----------------+---------------------------
 6.40312423743285 | 6.40312423743285::numeric | false  | false        | "LINESTRING(1 1 1,3 2 7)" | "POINT(1 1 1)" | "LINESTRING(1 1 1,3 2 7)"
(1 row)

SELECT * FROM cypher('postgis', $$
    WITH 'POINT(1 1 1)'::geometry as a, 'LINESTRING(0 0 0, 2 2 2)'::geometry as b
    RETURN 	ST_3DDistance(a,b),
		    ST_3DMaxDistance(a,b)::numeric,
			ST_3DDWithin(a,b,5),
			ST_3DDFullyWithin(a,b,5),
			ST_ASEWKT(ST_3DShortestline(a,b)),
			ST_ASEWKT(ST_3DClosestpoint(a,b)),
			ST_ASEWKT(ST_3DLongestline(a,b))
$$ ) as a(distance gtype, max_distance gtype, within gtype, fully_within gtype, shortest gtype, closest gtype, longest gtype);
 distance |       max_distance        | within | fully_within |         shortest          |    closest     |          longest          
----------+---------------------------+--------+--------------+---------------------------+----------------+---------------------------
 0.0      | 1.73205080756888::numeric | true   | true         | "LINESTRING(1 1 1,1 1 1)" | "POINT(1 1 1)" | "LINESTRING(1 1 1,0 0 0)"
(1 row)

SELECT * FROM cypher('postgis', $$
    WITH 'POINT(1 1 1)'::geometry as a, 'LINESTRING(5 2 6, -3 -2 4)'::geometry as b
    RETURN 	ST_3DDistance(a,b),
		    ST_3DMaxDistance(a,b)::numeric,
			ST_3DDWithin(a,b,5),
			ST_3DDFullyWithin(a,b,5),
			ST_ASEWKT(ST_3DShortestline(a,b)),
			ST_ASEWKT(ST_3DClosestpoint(a,b)),
			ST_ASEWKT(ST_3DLongestline(a,b))
$$ ) as a(distance gtype, max_distance gtype, within gtype, fully_within gtype, shortest gtype, closest gtype, longest gtype);
     distance     |       max_distance        | within | fully_within |                                  shortest                                  |    closest     |          longest          
------------------+---------------------------+--------+--------------+----------------------------------------------------------------------------+----------------+---------------------------
 4.09994192757944 | 6.48074069840786::numeric | true   | false        | "LINESTRING(1 1 1,0.619047619047619 -0.190476190476191 4.904761904761905)" | "POINT(1 1 1)" | "LINESTRING(1 1 1,5 2 6)"
(1 row)

SELECT * FROM cypher('postgis', $$
    WITH 'LINESTRING(1 1 3, 5 7 8)'::geometry as a, 'POINT(1 1 1)'::geometry as b
    RETURN 	ST_3DDistance(a,b),
		    ST_3DMaxDistance(a,b)::numeric,
			ST_3DDWithin(a,b,5),
			ST_3DDFullyWithin(a,b,5),
			ST_ASEWKT(ST_3DShortestline(a,b)),
			ST_ASEWKT(ST_3DClosestpoint(a,b)),
			ST_ASEWKT(ST_3DLongestline(a,b))
$$ ) as a(distance gtype, max_distance gtype, within gtype, fully_within gtype, shortest gtype, closest gtype, longest gtype);
 distance |       max_distance        | within | fully_within |         shortest          |    closest     |          longest          
----------+---------------------------+--------+--------------+---------------------------+----------------+---------------------------
 2.0      | 10.0498756211209::numeric | true   | false        | "LINESTRING(1 1 3,1 1 1)" | "POINT(1 1 3)" | "LINESTRING(5 7 8,1 1 1)"
(1 row)

SELECT * FROM cypher('postgis', $$
    WITH 'LINESTRING(1 0 5, 11 0 5)'::geometry as a, 'LINESTRING(5 2 0, 5 2 10, 5 0 13)'::geometry as b
    RETURN 	ST_3DDistance(a,b),
		    ST_3DMaxDistance(a,b)::numeric,
			ST_3DDWithin(a,b,5),
			ST_3DDFullyWithin(a,b,5),
			ST_ASEWKT(ST_3DShortestline(a,b)),
			ST_ASEWKT(ST_3DClosestpoint(a,b)),
			ST_ASEWKT(ST_3DLongestline(a,b))
$$ ) as a(distance gtype, max_distance gtype, within gtype, fully_within gtype, shortest gtype, closest gtype, longest gtype);
 distance | max_distance | within | fully_within |         shortest          |    closest     |           longest           
----------+--------------+--------+--------------+---------------------------+----------------+-----------------------------
 2.0      | 10::numeric  | true   | false        | "LINESTRING(5 0 5,5 2 5)" | "POINT(5 0 5)" | "LINESTRING(11 0 5,5 0 13)"
(1 row)

SELECT * FROM cypher('postgis', $$
    WITH 'LINESTRING(1 1 1 , 2 2 2)'::geometry as a, 'POLYGON((0 0 0, 2 2 2, 3 3 3, 0 0 0))'::geometry as b
    RETURN 	ST_3DDistance(a,b)
$$ ) as a(distance gtype);
 distance 
----------
 0.0
(1 row)

SELECT * FROM cypher('postgis', $$
    WITH 'LINESTRING(1 1 1 , 2 2 2)'::geometry as a, 'POLYGON((0 0 0, 2 2 2, 3 3 1, 0 0 0))'::geometry as b
    RETURN 	ST_3DDistance(a,b)
$$ ) as a(distance gtype);
 distance 
----------
 0.0
(1 row)

-- 3D mixed dimmentionality #2034
--closestpoint with 2d as first point and 3d as second
SELECT * FROM cypher('postgis', $$
    RETURN st_astext(st_3dclosestpoint('linestring(0 0,1 1,2 0)'::geometry, 'linestring(0 2 3, 3 2 3)'::geometry))
$$) AS r(c gtype);
NOTICE:  One or both of the geometries is missing z-value. The unknown z-value will be regarded as "any value"
         c         
-------------------
 "POINT Z (1 1 3)"
(1 row)

--closestpoint with 3d as first point and 2d as second
SELECT * FROM cypher('postgis', $$
    RETURN st_astext(st_3dclosestpoint('linestring(0 0 1,1 1 2,2 0 3)'::geometry, 'linestring(0 2, 3 2)'::geometry))
$$) AS r(c gtype);
NOTICE:  One or both of the geometries is missing z-value. The unknown z-value will be regarded as "any value"
         c         
-------------------
 "POINT Z (1 1 2)"
(1 row)

--shortestline with 2d as first point and 3d as second
SELECT * FROM cypher('postgis', $$
    RETURN st_astext(st_3dshortestline('linestring(0 0,1 1,2 0)'::geometry, 'linestring(0 2 3, 3 2 3)'::geometry))
$$) AS r(c gtype);
NOTICE:  One or both of the geometries is missing z-value. The unknown z-value will be regarded as "any value"
              c               
------------------------------
 "LINESTRING Z (1 1 3,1 2 3)"
(1 row)

--shortestline with 3d as first point and 2d as second
SELECT * FROM cypher('postgis', $$
    RETURN st_astext(st_3dshortestline('linestring(0 0 1,1 1 2,2 0 3)'::geometry, 'linestring(0 2, 3 2)'::geometry))
$$) AS r(c gtype);
NOTICE:  One or both of the geometries is missing z-value. The unknown z-value will be regarded as "any value"
              c               
------------------------------
 "LINESTRING Z (1 1 2,1 2 2)"
(1 row)

--distance with 2d as first point and 3d as second
SELECT * FROM cypher('postgis', $$
    RETURN st_3ddistance('linestring(0 0,1 1,2 0)'::geometry, 'linestring(0 2 3, 3 2 3)'::geometry)
$$) AS r(c gtype);
  c  
-----
 1.0
(1 row)

--distance with 3d as first point and 2d as second
SELECT * FROM cypher('postgis', $$
    RETURN st_3ddistance('linestring(0 0 1,1 1 2,2 0 3)'::geometry, 'linestring(0 2, 3 2)'::geometry)
$$) AS r(c gtype);
  c  
-----
 1.0
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_AsText(ST_3DClosestPoint('POINT(0 0 0)', 'POINT(0 0)'))
$$) AS r(c gtype);
NOTICE:  One or both of the geometries is missing z-value. The unknown z-value will be regarded as "any value"
         c         
-------------------
 "POINT Z (0 0 0)"
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_AsText(ST_3DShortestLine('LINESTRING(2 1, 3 0)', 'LINESTRING(0 0 2, 3 3 -4)'))
$$) AS r(c gtype);
NOTICE:  One or both of the geometries is missing z-value. The unknown z-value will be regarded as "any value"
                 c                  
------------------------------------
 "LINESTRING Z (2 1 -1,1.5 1.5 -1)"
(1 row)

/*
 * Polyheadral Surface
 */
 -- ST_Dimension on 2D: not closed
SELECT * FROM cypher('postgis', $$
    RETURN ST_Dimension('POLYHEDRALSURFACE(((0 0,0 0,0 1,0 0)))'::geometry)
$$) AS r(c gtype);
 c 
---
 2
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_Dimension('GEOMETRYCOLLECTION(POLYHEDRALSURFACE(((0 0,0 0,0 1,0 0))))'::geometry)
$$) AS r(c gtype);
 c 
---
 2
(1 row)

-- ST_Dimension on 3D: closed
SELECT * FROM cypher('postgis', $$
    RETURN ST_Dimension('POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,0 0 1,0 0 0)),((1 0 0,0 1 0,0 0 1,1 0 0)))'::geometry)
$$) AS r(c gtype);
 c 
---
 3
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN  ST_Dimension('GEOMETRYCOLLECTION(POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,0 0 1,0 0 0)),((1 0 0,0 1 0,0 0 1,1 0 0))))'::geometry)
$$) AS r(c gtype);
 c 
---
 3
(1 row)

-- ST_Dimension on 4D: closed
SELECT * FROM cypher('postgis', $$
    RETURN ST_Dimension('POLYHEDRALSURFACE(((0 0 0 0,0 0 1 0,0 1 0 2,0 0 0 0)),((0 0 0 0,0 1 0 0,1 0 0 4,0 0 0 0)),((0 0 0 0,1 0 0 0,0 0 1 6,0 0 0 0)),((1 0 0 0,0 1 0 0,0 0 1 0,1 0 0 0)))'::geometry)
$$) AS r(c gtype);
 c 
---
 3
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_Dimension('GEOMETRYCOLLECTION(POLYHEDRALSURFACE(((0 0 0 0,0 0 1 0,0 1 0 2,0 0 0 0)),((0 0 0 0,0 1 0 0,1 0 0 4,0 0 0 0)),((0 0 0 0,1 0 0 0,0 0 1 6,0 0 0 0)),((1 0 0 0,0 1 0 0,0 0 1 0,1 0 0 0))))'::geometry)
$$) AS r(c gtype);
 c 
---
 3
(1 row)

-- ST_Dimension on 3D: invalid polyedron (a single edge is shared 3 times)
SELECT * FROM cypher('postgis', $$
    RETURN ST_Dimension('POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 0 0,0 0 0)),((0 0 0,0 1 0,0 0 1,0 0 0)),((1 0 0,0 1 0,0 0 1,1 0 0)))'::geometry)
$$) AS r(c gtype);
 c 
---
 2
(1 row)

-- ST_Dimension on 3D: invalid polyedron (redundant point inside each face)
SELECT * FROM cypher('postgis', $$
    RETURN ST_Dimension('POLYHEDRALSURFACE(((0 0 0,1 0 0,1 0 0,0 0 0)),((0 0 1,1 0 1,1 0 1,0 0 1)),((0 0 2,1 0 2,1 0 2,0 0 2)),((0 0 3,1 0 3,1 0 3,0 0 3)))'::geometry)
$$) AS r(c gtype);
 c 
---
 2
(1 row)

-- ST_NumPatches
SELECT * FROM cypher('postgis', $$
    RETURN ST_NumPatches('POLYHEDRALSURFACE EMPTY'::geometry)
$$) AS r(c gtype);
 c 
---
 0
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_NumPatches('POLYHEDRALSURFACE(((0 0,0 0,0 1,0 0)))'::geometry)
$$) AS r(c gtype);
 c 
---
 1
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_NumPatches('POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,0 0 1,0 0 0)),((1 0 0,0 1 0,0 0 1,1 0 0)))'::geometry)
$$) AS r(c gtype);
 c 
---
 4
(1 row)

-- ST_PatchN
SELECT * FROM cypher('postgis', $$
    RETURN ST_AsEWKT(ST_patchN('POLYHEDRALSURFACE EMPTY'::geometry, 1))
$$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_AsEWKT(ST_patchN('POLYHEDRALSURFACE(((0 0,0 0,0 1,0 0)))'::geometry, 1))
$$) AS r(c gtype);
              c               
------------------------------
 "POLYGON((0 0,0 0,0 1,0 0))"
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_AsEWKT(ST_patchN('POLYHEDRALSURFACE(((0 0,0 0,0 1,0 0)))'::geometry, 0))
$$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_AsEWKT(ST_patchN('POLYHEDRALSURFACE(((0 0,0 0,0 1,0 0)))'::geometry, 2))
$$) AS r(c gtype);
 c 
---
 
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_AsEWKT(ST_patchN('POLYHEDRALSURFACE(((0 0 0,0 0 1,0 1 0,0 0 0)),((0 0 0,0 1 0,1 0 0,0 0 0)),((0 0 0,1 0 0,0 0 1,0 0 0)),((1 0 0,0 1 0,0 0 1,1 0 0)))'::geometry, 2))
$$) AS r(c gtype);
                  c                   
--------------------------------------
 "POLYGON((0 0 0,0 1 0,1 0 0,0 0 0))"
(1 row)

-- PolyedralSurface (TODO)
SELECT * FROM cypher('postgis', $$
    RETURN ST_AsText(ST_Reverse('POLYHEDRALSURFACE EMPTY'::geometry))
$$) AS r(c gtype);;
             c             
---------------------------
 "POLYHEDRALSURFACE EMPTY"
(1 row)

SELECT * FROM cypher('postgis', $$
    RETURN ST_AsText(ST_Reverse('POLYHEDRALSURFACE (((0 0,0 0,0 1,0 0)),((0 0,0 1,1 0,0 0)),((0 0,1 0,0 0,0 0)),((1 0,0 1,0 0,1 0)))'::geometry))
$$) AS r(c gtype);
                                                  c                                                   
------------------------------------------------------------------------------------------------------
 "POLYHEDRALSURFACE(((0 0,0 1,0 0,0 0)),((0 0,1 0,0 1,0 0)),((0 0,0 0,1 0,0 0)),((1 0,0 0,0 1,1 0)))"
(1 row)

-- TODO KNN
SELECT * FROM cypher('postgis', $$
    WITH ST_GeomFromText(
'PolyhedralSurface(
((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),
((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),  ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),
((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),  ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))
)') as a
    RETURN ST_Translate(a,100, 450,1000)
$$ ) as a(the_geom gtype);
the_geom


(1 row)

SELECT * FROM cypher('postgis', $$
    WITH ST_GeomFromText(
'PolyhedralSurface(
((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),
((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)) )') as a
    RETURN ST_Translate(a,100, 450,1000)
$$ ) as a(the_geom gtype);
                                                                                                                                                                                                                                                                                the_geom                                                                                                                                                                                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

(1 row)

SELECT * FROM cypher('postgis', $$CREATE (:j {j: 'PolyhedralSurface(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)) )'::geometry })  $$) AS r(c gtype);
 c 
---
(0 rows)

SELECT * FROM cypher('postgis', $$CREATE (:j {j: 'PolyhedralSurface(
((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),
((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),  ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),
((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),  ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1))
)'::geometry })  
$$) AS r(c gtype);
 c 
---
(0 rows)

SET enable_mergejoin = ON;
SET enable_hashjoin = ON;
SET enable_nestloop = ON;
SET enable_seqscan = false;
SET enable_sort = false;
CREATE INDEX ON postgis.j USING gist((properties->'"j"') gist_geometry_ops_nd);
\d+ postgis.j
                                                                                   Table "postgis.j"
   Column   |  Type   | Collation | Nullable |                                             Default                                             | Storage  | Stats target | Description 
------------+---------+-----------+----------+-------------------------------------------------------------------------------------------------+----------+--------------+-------------
 id         | graphid |           | not null | _graphid(_label_id('postgis'::name, 'j'::name)::integer, nextval('postgis.j_id_seq'::regclass)) | plain    |              | 
 properties | gtype   |           | not null | gtype_build_map()                                                                               | extended |              | 
Indexes:
    "j_expr_idx" gist ((properties -> '"j"'::gtype) gist_geometry_ops_nd)
Inherits: postgis._ag_label_vertex

EXPLAIN (costs off)
SELECT * FROM cypher('postgis', $$
    MATCH (a:j)
    WHERE a.j &&& 'PolyhedralSurface(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)) )'::geometry
    RETURN a
$$ ) as a(b vertex);


 Index Scan using j_expr_idx on j a
   Index Cond: ((properties -> '"j"'::gtypegtype)
(2 rows)

SELECT * FROM cypher('postgis', $$
    MATCH (a:j)
    WHERE a.j &&& 'PolyhedralSurface(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)) )'::geometry
    RETURN a
$$ ) as a(b vertex);
b
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"id": 844424930131969, "label": "j", "properties": {"j}}
 {"id": 844424930131970, "label": "j", "properties": {"j}}
(2 rows)

EXPLAIN (costs off)
SELECT * FROM cypher('postgis', $$
    MATCH (a:j)
    RETURN a ORDER BY a.j <<->> 'PolyhedralSurface(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)) )'
$$ ) as a(b vertex);
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on _
   ->  Sort
         Sort Key: (((build_vertex(a.id, '22640'::oid, a.properties) -> '"j"'::gtype) <<->> '"PolyhedralSurface(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)) )"'::gtype))
         ->  Seq Scan on j a
(4 rows)

SELECT * FROM cypher('postgis', $$
    MATCH (a:j)
    RETURN a ORDER BY a.j <<->> 'PolyhedralSurface(((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)), ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)) )'
$$ ) as a(b vertex);
b

 {"id": 844424930131969, "label": "j", "properties": {"j}}
 {"id": 844424930131970, "label": "j", "properties": {"j}}
(2 rows)

--
-- 2D Gist Indices
--
SELECT * FROM cypher('postgis', $$CREATE (:i {i: 'POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry })$$) AS r(c gtype);
 c 
---
(0 rows)

SELECT * FROM cypher('postgis', $$CREATE (:i {i: 'POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry }) $$) AS r(c gtype);
 c 
---
(0 rows)

SELECT * FROM cypher('postgis', $$CREATE (:i {i: 'POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry })  $$) AS r(c gtype);
 c 
---
(0 rows)

SELECT create_vlabel('postgis', 'i');
ERROR:  label "i" already exists
CREATE INDEX ON postgis.i USING gist ((properties->'"i"') gist_geometry_ops_2d);
SELECT * FROM cypher('postgis', $$CREATE (:i {i: 'POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry })$$) AS r(c gtype);
 c 
---
(0 rows)

/*





SELECT * FROM cypher('postgis', $$
    MATCH (i:i) 
    WHERE i.i << 'POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry
    RETURN i
$$) AS r(c vertex);

EXPLAIN
SELECT * FROM cypher('postgis', $$
    MATCH (i:i) 
    WHERE i.i << 'POLYGON( (0 0, 10 0, 10 10, 0 10, 0 0) )'::geometry
    RETURN i
$$) AS r(c vertex);
*/
--
-- Typecasting
--
--
-- To Geometry
--
SELECT c FROM cypher('postgis', $$ RETURN topoint('(1, 2)')::geometry $$ ) AS (c gtype);
                     c                      
--------------------------------------------
 0101000000000000000000F03F0000000000000040
(1 row)

SELECT c FROM cypher('postgis', $$ RETURN topath('(1, 2), (3, 4)')::geometry $$ ) AS (c gtype);
                                         c                                          
------------------------------------------------------------------------------------
 010200000002000000000000000000F03F000000000000004000000000000008400000000000001040
(1 row)

SELECT c FROM cypher('postgis', $$ RETURN topolygon('(1,1), (2,2), (3, 3), (4, 4)')::geometry $$ ) AS (c gtype);
                                                                                             c                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 01030000000100000005000000000000000000F03F000000000000F03F000000000000004000000000000000400000000000000840000000000000084000000000000010400000000000001040000000000000F03F000000000000F03F
(1 row)

SELECT 'POLYGON((0 0,1 1,1 3,2 3,2 0,0 0))'::geometry::gtype;
                                                                                                           gtype                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 0103000000010000000600000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F0000000000000840000000000000004000000000000008400000000000000040000000000000000000000000000000000000000000000000
(1 row)

select * FROM cypher('postgis', $$
    RETURN topoint('POINT(1 1)'::geometry)
$$) AS (c gtype);
   c   
-------
 (1,1)
(1 row)

select * FROM cypher('postgis', $$
    RETURN 'POINT(1 1)'::geometry
$$) AS (c point);
   c   
-------
 (1,1)
(1 row)

--
-- From Box3D
--
-- gtype Box3D to box3d
SELECT c FROM cypher('postgis', $$RETURN toBox3D('BOX3D(1 2 3, 4 5 6)')$$) AS (c box3d);
         c          
--------------------
 BOX3D(1 2 3,4 5 6)
(1 row)

-- gtype string to box3d
SELECT c FROM cypher('postgis', $$RETURN 'BOX3D(1 2 3, 4 5 6)' $$) AS (c box3d);
         c          
--------------------
 BOX3D(1 2 3,4 5 6)
(1 row)

-- gtype Box3D to gtype box2d
SELECT c FROM cypher('postgis', $$RETURN toBox3D('BOX3D(1 2 3, 4 5 6)')::box2d $$) AS (c gtype);
      c       
--------------
 BOX(1 2,4 5)
(1 row)

-- gtype Box3D to gtype geometry
SELECT ST_AsEWKT(c) FROM cypher('postgis', $$RETURN toBox3D('BOX3D(1 2 3, 4 5 6)')::geometry$$) AS (c gtype);
                                                                                                            st_asewkt                                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 "POLYHEDRALSURFACE(((1 2 3,1 5 3,4 5 3,4 2 3,1 2 3)),((1 2 6,4 2 6,4 5 6,1 5 6,1 2 6)),((1 2 3,1 2 6,1 5 6,1 5 3,1 2 3)),((4 2 3,4 5 3,4 5 6,4 2 6,4 2 3)),((1 2 3,4 2 3,4 2 6,1 2 6,1 2 3)),((1 5 3,1 5 6,4 5 6,4 5 3,1 5 3)))"
(1 row)

-- gtype Box3D to geometry 
SELECT ST_AsEWKT(c) FROM cypher('postgis', $$RETURN toBox3D('BOX3D(1 2 3, 4 5 6)')$$) AS (c geometry);
                                                                                                           st_asewkt                                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 POLYHEDRALSURFACE(((1 2 3,1 5 3,4 5 3,4 2 3,1 2 3)),((1 2 6,4 2 6,4 5 6,1 5 6,1 2 6)),((1 2 3,1 2 6,1 5 6,1 5 3,1 2 3)),((4 2 3,4 5 3,4 5 6,4 2 6,4 2 3)),((1 2 3,4 2 3,4 2 6,1 2 6,1 2 3)),((1 5 3,1 5 6,4 5 6,4 5 3,1 5 3)))
(1 row)

--
-- From Box2D
--
-- gtype Box2d to Box2d
SELECT ST_AsEWKT(c) FROM cypher('postgis', $$RETURN toBox2D('box(1 2, 5 6)') $$) AS (c box2D);
           st_asewkt            
--------------------------------
 POLYGON((1 2,1 6,5 6,5 2,1 2))
(1 row)

-- gtype string to Box2d
SELECT ST_AsEWKT(c) FROM cypher('postgis', $$RETURN 'box(1 2, 5 6)' $$) AS (c box2D);
           st_asewkt            
--------------------------------
 POLYGON((1 2,1 6,5 6,5 2,1 2))
(1 row)

-- gtype Box2d to geometry
SELECT ST_AsEWKT(c) FROM cypher('postgis', $$RETURN toBox2D('box(1 2, 5 6)') $$) AS (c geometry);
           st_asewkt            
--------------------------------
 POLYGON((1 2,1 6,5 6,5 2,1 2))
(1 row)

-- gtype Box3D to box2d
SELECT ST_AsEWKT(c) FROM cypher('postgis', $$RETURN toBox3D('BOX3D(1 2 3, 4 5 6)') $$) AS (c box2d);
           st_asewkt            
--------------------------------
 POLYGON((1 2,1 5,4 5,4 2,1 2))
(1 row)

SELECT * FROM drop_graph('postgis', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table postgis._ag_label_vertex
drop cascades to table postgis._ag_label_edge
drop cascades to table postgis.j
drop cascades to table postgis.i
NOTICE:  graph "postgis" has been dropped
 drop_graph 
------------
 
(1 row)

