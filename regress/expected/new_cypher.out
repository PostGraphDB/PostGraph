/*
 * Copyright (C) 2024 PostGraphDB
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */ 
-- Regression tests don't preload extensions, gotta load it first
LOAD 'postgraph';
CREATE EXTENSION postgraph;
ERROR:  extension "postgraph" already exists
CREATE EXTENSION hstore CASCADE SCHEMA public;
CREATE EXTENSION IF NOT EXISTS hstore;
NOTICE:  extension "hstore" already exists, skipping
CREATE EXTENSION IF NOT EXISTS pg_trgm VERSION '1.3';
-- Basic Graph creation
CREATE GRAPH new_cypher;
NOTICE:  graph "new_cypher" has been created
 create_graph 
--------------
 
(1 row)

-- Assign Graph to use
USE GRAPH new_cypher;
 use_graph 
-----------
 
(1 row)

-- Reuse Name, should throw error
CREATE GRAPH new_cypher;
ERROR:  graph "new_cypher" already exists
-- Graph Does not exist, should throw error
USE GRAPH new_cypher;
 use_graph 
-----------
 
(1 row)

CREATE GRAPH new_cypher_2;
NOTICE:  graph "new_cypher_2" has been created
 create_graph 
--------------
 
(1 row)

USE GRAPH new_cypher_2;
 use_graph 
-----------
 
(1 row)

USE GRAPH new_cypher;
 use_graph 
-----------
 
(1 row)

-- Old Grammar is at least partially plugged in.
RETURN 1 as a;
 a 
---
 1
(1 row)

CREATE (n);
--
(0 rows)

CREATE (n) RETURN n;
                           n                            
--------------------------------------------------------
 {"id": 281474976710658, "label": "", "properties": {}}
(1 row)

--CREATE (n) RETURN *;
MATCH (n) RETURN n;
                           n                            
--------------------------------------------------------
 {"id": 281474976710657, "label": "", "properties": {}}
 {"id": 281474976710658, "label": "", "properties": {}}
(2 rows)

MATCH (n) RETURN *;
                           n                            
--------------------------------------------------------
 {"id": 281474976710657, "label": "", "properties": {}}
 {"id": 281474976710658, "label": "", "properties": {}}
(2 rows)

CREATE TABLE tst (i text);
CREATE TABLE tst3 () INHERITS (tst);
CREATE TEMPORARY TABLE tst2 (i text);
CREATE TABLE tst4 (i text) PARTITION BY LIST (i);
CREATE TABLE tst5 (i text) PARTITION BY LIST (i COLLATE de_DE);
CREATE TABLE tst6 (i text) PARTITION BY LIST (i COLLATE de_DE text_ops);
CREATE TABLE tst7 (i text) USING heap;
CREATE TABLE tst8 (i text) WITH (fillfactor=70);
SELECT;
--
(1 row)

SELECT ALL;
--
(1 row)

SELECT *;
ERROR:  SELECT * with no tables specified is not valid
LINE 1: SELECT *;
               ^
SELECT * FROM tst;
 i 
---
(0 rows)

SELECT tst.i FROM tst;
 i 
---
(0 rows)

SELECT a.i FROM tst AS a;
 i 
---
(0 rows)

SELECT a.i FROM tst a;
 i 
---
(0 rows)

SELECT a.j FROM tst AS a(j);
ERROR:  syntax error at or near "("
LINE 1: SELECT a.j FROM tst AS a(j);
                                ^
SELECT i FROM tst WHERE i = i;
 i 
---
(0 rows)

SELECT i FROM tst WHERE i > i;
 i 
---
(0 rows)

--SELECT a.j FROM tst a(j);
DROP GRAPH new_cypher CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table new_cypher._ag_label_vertex
drop cascades to table new_cypher._ag_label_edge
NOTICE:  graph "new_cypher" has been dropped
 drop_graph 
------------
 
(1 row)

DROP GRAPH new_cypher_2 CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table new_cypher_2._ag_label_vertex
drop cascades to table new_cypher_2._ag_label_edge
NOTICE:  graph "new_cypher_2" has been dropped
 drop_graph 
------------
 
(1 row)

