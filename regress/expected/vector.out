/*
 * Copyright (C) 2023 PostGraphDB
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * For PostgreSQL Database Management System:
 * (formerly known as Postgres, then as Postgres95) 
 *
 * Portions Copyright (c) 2020-2023, Apache Software Foundation
 * Portions Copyright (c) 2019-2020, Bitnine Global
 */ 
SET extra_float_digits = 0;
LOAD 'postgraph';
SET search_path TO postgraph;
set timezone TO 'GMT';
SELECT create_graph('vector'); 
NOTICE:  graph "vector" has been created
 create_graph 
--------------
 
(1 row)

SELECT * from cypher('vector', $$RETURN tovector("[]")$$) as (Labels gtype);
ERROR:  vector must have at least 1 dimension
SELECT * from cypher('vector', $$RETURN tovector("[1.0, 9, 2, .9]")$$) as (Labels gtype);
        labels        
----------------------
 [1.0, 9.0, 2.0, 0.9]
(1 row)

SELECT * from cypher('vector', $$RETURN tovector("[1.0]")$$) as (Labels gtype);
 labels 
--------
 [1.0]
(1 row)

SELECT * from cypher('vector', $$RETURN '[]'::vector $$) as (Labels gtype);
ERROR:  vector must have at least 1 dimension
SELECT * from cypher('vector', $$RETURN '[1.0, 9, 2, .9]'::vector $$) as (Labels gtype);
        labels        
----------------------
 [1.0, 9.0, 2.0, 0.9]
(1 row)

SELECT * from cypher('vector', $$RETURN '[1.0]'::vector $$) as (Labels gtype);
 labels 
--------
 [1.0]
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, NaN]")
$$) as (Labels gtype);
ERROR:  NaN not allowed in vector
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, Infinity]")
$$) as (Labels gtype);
ERROR:  infinite value not allowed in vector
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, -Infinity]")
$$) as (Labels gtype);
ERROR:  infinite value not allowed in vector
--
-- typecasting
--
SELECT * from cypher('vector', $$RETURN '[1.0, 9, 2, .9]'::vector $$) as (value_array bigint[]);
 value_array 
-------------
 {1,9,2,1}
(1 row)

SELECT * from cypher('vector', $$RETURN '[1.0, 9, 2, .9]'::vector $$) as (value_array int[]);
 value_array 
-------------
 {1,9,2,1}
(1 row)

SELECT * from cypher('vector', $$RETURN '[1.0, 9, 2, .9]'::vector $$) as (value_array smallint[]);
 value_array 
-------------
 {1,9,2,1}
(1 row)

--
-- l2 distance
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]")  <-> tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]")  <-> tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
      labels      
------------------
 8.32657048249758
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]")  <-> tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 1.0
(1 row)

--
-- inner product
--
SELECT * from cypher('vector', $$
    RETURN inner_product(tovector("[1.0, 9, 2, .9]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels 
--------
 86.81
(1 row)

SELECT * from cypher('vector', $$
    RETURN inner_product(tovector("[5.0, 2, 4, .324]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels  
---------
 31.2916
(1 row)

SELECT * from cypher('vector', $$
    RETURN inner_product(tovector("[1.0]"), tovector("[2.0]"))
$$) as (Labels gtype);
 labels 
--------
 2.0
(1 row)

--
-- negative inner product
--
SELECT * from cypher('vector', $$
    RETURN negative_inner_product(tovector("[1.0, 9, 2, .9]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels 
--------
 -86.81
(1 row)

SELECT * from cypher('vector', $$
    RETURN negative_inner_product(tovector("[5.0, 2, 4, .324]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
  labels  
----------
 -31.2916
(1 row)

SELECT * from cypher('vector', $$
    RETURN negative_inner_product(tovector("[1.0]"), tovector("[2.0]"))
$$) as (Labels gtype);
 labels 
--------
 -2.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]")  <-> tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]")  <#> tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
  labels  
----------
 -31.2916
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]")  <#> tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 -2.0
(1 row)

--
-- cosine distance
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]")  <=> tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]")  <=> tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
      labels       
-------------------
 0.499930158237086
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]")  <=> tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

--
-- l1 distance
--
SELECT * from cypher('vector', $$
    RETURN l1_distance(tovector("[1.0, 9, 2, .9]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN l1_distance(tovector("[5.0, 2, 4, .324]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels 
--------
 13.576
(1 row)

SELECT * from cypher('vector', $$
    RETURN l1_distance(tovector("[1.0]"), tovector("[2.0]"))
$$) as (Labels gtype);
 labels 
--------
 1.0
(1 row)

--
-- spherical distance
--
SELECT * from cypher('vector', $$
    RETURN spherical_distance(tovector("[1.0, 9, 2, .9]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN spherical_distance(tovector("[5.0, 2, 4, .324]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN spherical_distance(tovector("[1.0]"), tovector("[2.0]"))
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

--
-- dims
--
SELECT * from cypher('vector', $$
    RETURN dims(tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels 
--------
 4.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN dims(tovector("[5.0, 2, 4, .324]"))
$$) as (Labels gtype);
 labels 
--------
 4.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN dims(tovector("[1.0]"))
$$) as (Labels gtype);
 labels 
--------
 1.0
(1 row)

--
-- norm
--
SELECT * from cypher('vector', $$
    RETURN norm(tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
      labels      
------------------
 9.31718841711382
(1 row)

SELECT * from cypher('vector', $$
    RETURN norm(tovector("[5.0, 2, 4, .324]"))
$$) as (Labels gtype);
      labels      
------------------
 6.71602382366233
(1 row)

SELECT * from cypher('vector', $$
    RETURN norm(tovector("[1.0]"))
$$) as (Labels gtype);
 labels 
--------
 1.0
(1 row)

--
-- + Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]")  + tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
        labels         
-----------------------
 [2.0, 18.0, 4.0, 1.8]
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") + tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
         labels          
-------------------------
 [6.0, 11.0, 6.0, 1.224]
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") + tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 [3.0]
(1 row)

--
-- - Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]")  - tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
        labels        
----------------------
 [0.0, 0.0, 0.0, 0.0]
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") - tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
          labels          
--------------------------
 [4.0, -7.0, 2.0, -0.576]
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") - tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 [-1.0]
(1 row)

--
-- * Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]")  * tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
         labels         
------------------------
 [1.0, 81.0, 4.0, 0.81]
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") * tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
          labels          
--------------------------
 [5.0, 18.0, 8.0, 0.2916]
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") * tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 [2.0]
(1 row)

--
-- = Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]") = tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") = tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") = tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

--
-- <> Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]") <> tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") <> tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") <> tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

--
-- > Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]") > tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") > tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") > tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

--
-- >= Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]")  >= tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") >= tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") >= tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

--
-- < Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]") < tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") < tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") < tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

--
-- <= Operator
--
SELECT * from cypher('vector', $$
    RETURN tovector("[1.0, 9, 2, .9]") <= tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[5.0, 2, 4, .324]") <= tovector("[1.0, 9, 2, .9]")
$$) as (Labels gtype);
 labels 
--------
 false
(1 row)

SELECT * from cypher('vector', $$
    RETURN tovector("[1.0]") <= tovector("[2.0]")
$$) as (Labels gtype);
 labels 
--------
 true
(1 row)

--
-- l2 squared distance
--
SELECT * from cypher('vector', $$
    RETURN l2_squared_distance(tovector("[1.0, 9, 2, .9]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
 labels 
--------
 0.0
(1 row)

SELECT * from cypher('vector', $$
    RETURN l2_squared_distance(tovector("[5.0, 2, 4, .324]"), tovector("[1.0, 9, 2, .9]"))
$$) as (Labels gtype);
  labels   
-----------
 69.331776
(1 row)

SELECT * from cypher('vector', $$
    RETURN l2_squared_distance(tovector("[1.0]"), tovector("[2.0]"))
$$) as (Labels gtype);
 labels 
--------
 1.0
(1 row)

SELECT gtype_build_map('i'::text, tovector('"[0, 0, 0]"'::gtype)); 
    gtype_build_map     
------------------------
 {"i": [0.0, 0.0, 0.0]}
(1 row)

SELECT gtype_build_list('i'::text, tovector('"[0, 0, 0]"'::gtype));
    gtype_build_list    
------------------------
 ["i", [0.0, 0.0, 0.0]]
(1 row)

SELECT gtype_build_map('i'::text, tovector('"[0, 0, 0]"'::gtype))->'"i"';
    ?column?     
-----------------
 [0.0, 0.0, 0.0]
(1 row)

--
-- ivfflat
--
SET enable_seqscan = false;
-- SQL
CREATE TABLE ivfflat (v gtype);
INSERT INTO ivfflat (v) VALUES (tovector('"[0, 0, 0]"'::gtype));
CREATE INDEX ON ivfflat USING ivfflat (v gtype_l2_ops)  WITH (lists = 1, dimensions = 3);
WARNING:  detected write past chunk end in PortalContext 0x1293480
EXPLAIN SELECT * FROM ivfflat ORDER BY v <-> '[1, 2, 3]';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Index Scan using ivfflat_v_idx on ivfflat  (cost=2.51..6.52 rows=1 width=64)
   Order By: (v <-> '[1, 2, 3]'::gtype)
(2 rows)

-- CYPHER XXX: Not Done
SELECT create_graph('ivfflat_l2');
NOTICE:  graph "ivfflat_l2" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('ivfflat_l2', $$ CREATE ( {i: tovector('[0, 0, 0]')}) $$) as (i gtype);
 i 
---
(0 rows)

SELECT * FROM cypher('ivfflat_l2', $$ CREATE ( {i: tovector('[1, 2, 3]')}) $$) as (i gtype);
 i 
---
(0 rows)

SELECT * FROM cypher('ivfflat_l2', $$ CREATE ( {i: tovector('[1, 1, 1]')}) $$) as (i gtype);
 i 
---
(0 rows)

SELECT create_ivfflat_l2_ops_index('ivfflat_l2', '_ag_label_vertex', 'i', 3 , 1);
WARNING:  detected write past chunk end in ExprContext 0x12fdb30
WARNING:  detected write past chunk end in ExprContext 0x12927e0
 create_ivfflat_l2_ops_index 
-----------------------------
 
(1 row)

EXPLAIN SELECT * FROM cypher('ivfflat_l2', $$ MATCH (n) RETURN n ORDER BY n.i <-> toVector('[3,3,3]') $$) as (i vertex);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Subquery Scan on _  (cost=10000000001.08..10000000001.12 rows=3 width=32)
   ->  Sort  (cost=10000000001.08..10000000001.09 rows=3 width=64)
         Sort Key: (((build_vertex(n.id, '18174'::oid, n.properties) -> '"i"'::gtype) <-> '[3.0, 3.0, 3.0]'::gtype))
         ->  Seq Scan on _ag_label_vertex n  (cost=10000000000.00..10000000001.06 rows=3 width=64)
(4 rows)

EXPLAIN SELECT * FROM cypher('ivfflat_l2', $$ MATCH (n) WITH n as n, n.i as i ORDER BY n.i <-> toVector('[3,3,3]') RETURN n LIMIT 1 $$) as (i vertex);
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=10000000001.08..10000000001.10 rows=1 width=32)
   ->  Subquery Scan on _  (cost=10000000001.08..10000000001.12 rows=3 width=32)
         ->  Sort  (cost=10000000001.08..10000000001.09 rows=3 width=96)
               Sort Key: (((build_vertex(n.id, '18174'::oid, n.properties) -> '"i"'::gtype) <-> '[3.0, 3.0, 3.0]'::gtype))
               ->  Seq Scan on _ag_label_vertex n  (cost=10000000000.00..10000000001.06 rows=3 width=96)
(5 rows)

EXPLAIN SELECT * FROM cypher('ivfflat_l2', $$ MATCH (n) RETURN n ORDER BY n.i <-> toVector('[3,3,3]') $$) as (i vertex);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Subquery Scan on _  (cost=10000000001.08..10000000001.12 rows=3 width=32)
   ->  Sort  (cost=10000000001.08..10000000001.09 rows=3 width=64)
         Sort Key: (((build_vertex(n.id, '18174'::oid, n.properties) -> '"i"'::gtype) <-> '[3.0, 3.0, 3.0]'::gtype))
         ->  Seq Scan on _ag_label_vertex n  (cost=10000000000.00..10000000001.06 rows=3 width=64)
(4 rows)

EXPLAIN SELECT * FROM cypher('ivfflat_l2', $$ 
    MATCH (n) ORDER BY n.i <-> toVector('[3,3,3]') 
    RETURN n 
$$) as (i vertex);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Subquery Scan on _  (cost=7.52..11.61 rows=3 width=32)
   ->  Index Scan using _ag_label_vertex_expr_idx on _ag_label_vertex n  (cost=7.52..11.58 rows=3 width=96)
         Order By: ((properties -> '"i"'::gtype) <-> '[3.0, 3.0, 3.0]'::gtype)
(3 rows)

SELECT *
FROM cypher('ivfflat_l2', $$
    MATCH (n), (m) WHERE n <> m
    WITH n, m
    ORDER BY n.i <-> m.i LIMIT 1
    WITH n, collect(m) 
$$) as (n vertex, neighbors vertex[]);
ERROR:  expression item must be aliased
LINE 6:     WITH n, collect(m) 
                    ^
HINT:  Items can be aliased by using AS.
SELECT *
FROM cypher('ivfflat_l2', $$
    MATCH (n), (m) WHERE n <> m
    WITH n, m
    ORDER BY n.i <-> m.i
    RETURN n, collect(m, 2) as neighbors
$$) as (n vertex, neighbors vertex[]);
                                     n                                      |                                        neighbors                                         
----------------------------------------------------------------------------+------------------------------------------------------------------------------------------
 {"id": 281474976710657, "label": "", "properties": {"i": [0.0, 0.0, 0.0]}} | {"{\"id\": 281474976710659, \"label\": \"\", \"properties\": {\"i\": [1.0, 1.0, 1.0]}}"}
 {"id": 281474976710659, "label": "", "properties": {"i": [1.0, 1.0, 1.0]}} | {"{\"id\": 281474976710657, \"label\": \"\", \"properties\": {\"i\": [0.0, 0.0, 0.0]}}"}
 {"id": 281474976710658, "label": "", "properties": {"i": [1.0, 2.0, 3.0]}} | {"{\"id\": 281474976710659, \"label\": \"\", \"properties\": {\"i\": [1.0, 1.0, 1.0]}}"}
 {"id": 281474976710659, "label": "", "properties": {"i": [1.0, 1.0, 1.0]}} | {"{\"id\": 281474976710658, \"label\": \"\", \"properties\": {\"i\": [1.0, 2.0, 3.0]}}"}
 {"id": 281474976710657, "label": "", "properties": {"i": [0.0, 0.0, 0.0]}} | {"{\"id\": 281474976710658, \"label\": \"\", \"properties\": {\"i\": [1.0, 2.0, 3.0]}}"}
 {"id": 281474976710658, "label": "", "properties": {"i": [1.0, 2.0, 3.0]}} | {"{\"id\": 281474976710657, \"label\": \"\", \"properties\": {\"i\": [0.0, 0.0, 0.0]}}"}
(6 rows)

SELECT *
FROM cypher('ivfflat_l2', $$
    MATCH (n), (m) WHERE n <> m
    WITH n, m
    ORDER BY n.i <-> m.i
    WITH n, collect(m, 2) as neighbors
    UNWIND neighbors as m_nearest
    CREATE (n)-[:NEIGHBOR { distance: n.i <-> m_nearest.i}]->(m_nearest)
$$) as (n gtype);
 n 
---
(0 rows)

SELECT * FROM cypher('ivfflat_l2', $$ MATCH ()-[e]->() RETURN e $$) as (e edge);
                                                                         e                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------
 {"id": 844424930131969, "start_id": 281474976710660, "end_id": 281474976710661, "label": "NEIGHBOR", "properties": {"distance": 1.73205080756888}}
 {"id": 844424930131970, "start_id": 281474976710662, "end_id": 281474976710663, "label": "NEIGHBOR", "properties": {"distance": 1.73205080756888}}
 {"id": 844424930131971, "start_id": 281474976710664, "end_id": 281474976710665, "label": "NEIGHBOR", "properties": {"distance": 2.23606797749979}}
 {"id": 844424930131972, "start_id": 281474976710666, "end_id": 281474976710667, "label": "NEIGHBOR", "properties": {"distance": 2.23606797749979}}
 {"id": 844424930131973, "start_id": 281474976710668, "end_id": 281474976710669, "label": "NEIGHBOR", "properties": {"distance": 3.74165738677394}}
 {"id": 844424930131974, "start_id": 281474976710670, "end_id": 281474976710671, "label": "NEIGHBOR", "properties": {"distance": 3.74165738677394}}
(6 rows)

SELECT * FROM cypher('ivfflat_l2', $$ MATCH (n) RETURN count(*) $$) as (i gtype);
 i  
----
 15
(1 row)

SELECT * FROM cypher('ivfflat_l2', $$ MATCH (n) RETURN n $$) as (i vertex);
                                     i                                      
----------------------------------------------------------------------------
 {"id": 281474976710657, "label": "", "properties": {"i": [0.0, 0.0, 0.0]}}
 {"id": 281474976710658, "label": "", "properties": {"i": [1.0, 2.0, 3.0]}}
 {"id": 281474976710659, "label": "", "properties": {"i": [1.0, 1.0, 1.0]}}
 {"id": 281474976710660, "label": "", "properties": {}}
 {"id": 281474976710661, "label": "", "properties": {}}
 {"id": 281474976710662, "label": "", "properties": {}}
 {"id": 281474976710663, "label": "", "properties": {}}
 {"id": 281474976710664, "label": "", "properties": {}}
 {"id": 281474976710665, "label": "", "properties": {}}
 {"id": 281474976710666, "label": "", "properties": {}}
 {"id": 281474976710667, "label": "", "properties": {}}
 {"id": 281474976710668, "label": "", "properties": {}}
 {"id": 281474976710669, "label": "", "properties": {}}
 {"id": 281474976710670, "label": "", "properties": {}}
 {"id": 281474976710671, "label": "", "properties": {}}
(15 rows)

SELECT * FROM cypher('ivfflat_l2', $$ CREATE ( {j: tovector('[1, 1, 1]')}) $$) as (i gtype);
 i 
---
(0 rows)

SELECT * FROM cypher('ivfflat_l2', $$ CREATE ( {j: tovector('[1]')}) $$) as (i gtype);
 i 
---
(0 rows)

SELECT * FROM cypher('ivfflat_l2', $$ CREATE ( {j: tovector('[]')}) $$) as (i gtype);
ERROR:  vector must have at least 1 dimension
SELECT * FROM cypher('ivfflat_l2', $$ MATCH (n) RETURN n.j $$) as (i gtype);
        i        
-----------------
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 [1.0, 1.0, 1.0]
 [1.0]
(17 rows)

--
-- ivfflat 
--
SELECT create_graph('ivfflat_ip');
NOTICE:  graph "ivfflat_ip" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('ivfflat_ip', $$ CREATE ( {i: tovector('[0, 0, 0]')}) $$) as (i gtype);
 i 
---
(0 rows)

SELECT * FROM cypher('ivfflat_ip', $$ CREATE ( {i: tovector('[1, 2, 3]')}) $$) as (i gtype);
 i 
---
(0 rows)

SELECT * FROM cypher('ivfflat_ip', $$ CREATE ( {i: tovector('[1, 1, 1]')}) $$) as (i gtype);
 i 
---
(0 rows)

SELECT create_ivfflat_ip_ops_index('ivfflat_ip', '_ag_label_vertex', 'i', 3 , 1);
WARNING:  problem in alloc set ExprContext: detected write past chunk end in block 0x13c67f0, chunk 0x13c7b18
WARNING:  problem in alloc set ExprContext: detected write past chunk end in block 0x12c0660, chunk 0x12c0cb0
WARNING:  problem in alloc set ExprContext: detected write past chunk end in block 0x13c67f0, chunk 0x13c7b18
WARNING:  problem in alloc set ExprContext: detected write past chunk end in block 0x12c0660, chunk 0x12c0cb0
ERROR:  <-> requires vector arguments
EXPLAIN SELECT * FROM cypher('ivfflat_ip', $$ MATCH (n) ORDER BY n.i <#> toVector('[3,3,3]') RETURN n$$) as (i vertex);
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Subquery Scan on _  (cost=10000000092.37..10000000107.37 rows=1200 width=32)
   ->  Sort  (cost=10000000092.37..10000000095.37 rows=1200 width=96)
         Sort Key: (((n.properties -> '"i"'::gtype) <#> '[3.0, 3.0, 3.0]'::gtype))
         ->  Seq Scan on _ag_label_vertex n  (cost=10000000000.00..10000000031.00 rows=1200 width=96)
(4 rows)

--
-- Index Errors
--
SELECT * FROM cypher('ivfflat_l2', $$ CREATE ( {i: tovector('[1, 1 ]')}) $$) as (i gtype);
ERROR:  different vector dimensions 2 and 3
SELECT * FROM cypher('ivfflat_l2', $$ CREATE ( {i: 'Hello World'}) $$) as (i gtype);
ERROR:  <-> requires vector arguments
--
-- cleanup
--
DROP TABLE ivfflat;
SELECT drop_graph('vector', true);
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table vector._ag_label_vertex
drop cascades to table vector._ag_label_edge
NOTICE:  graph "vector" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT drop_graph('ivfflat_l2', true);
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table ivfflat_l2._ag_label_vertex
drop cascades to table ivfflat_l2._ag_label_edge
drop cascades to table ivfflat_l2."NEIGHBOR"
NOTICE:  graph "ivfflat_l2" has been dropped
 drop_graph 
------------
 
(1 row)

