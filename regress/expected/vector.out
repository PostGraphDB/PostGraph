/*
 * Copyright (C) 2023 PostGraphDB
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * For PostgreSQL Database Management System:
 * (formerly known as Postgres, then as Postgres95) 
 *
 * Portions Copyright (c) 2020-2023, Apache Software Foundation
 * Portions Copyright (c) 2019-2020, Bitnine Global
 */ 
SET extra_float_digits = 0;
LOAD 'postgraph';
SET search_path TO postgraph;
set timezone TO 'GMT';
CREATE GRAPH vector;
NOTICE:  graph "vector" has been created
 create_graph 
--------------
 
(1 row)

USE GRAPH vector;
 use_graph 
-----------
 
(1 row)

RETURN tovector('[]');
ERROR:  vector must have at least 1 dimension
RETURN tovector('[1.0, 9, 2, .9]');
       tovector       
----------------------
 [1.0, 9.0, 2.0, 0.9]
(1 row)

RETURN tovector('[1.0]');
 tovector 
----------
 [1.0]
(1 row)

RETURN '[]'::vector;
ERROR:  vector must have at least 1 dimension
RETURN '[1.0, 9, 2, .9]'::vector;
       ?column?       
----------------------
 [1.0, 9.0, 2.0, 0.9]
(1 row)

RETURN '[1.0]'::vector;
 ?column? 
----------
 [1.0]
(1 row)

RETURN tovector('[1.0, NaN]');
ERROR:  NaN not allowed in vector
RETURN tovector('[1.0, Infinity]');
ERROR:  infinite value not allowed in vector
RETURN tovector('[1.0, -Infinity]');
ERROR:  infinite value not allowed in vector
--
-- l2 distance
--
RETURN tovector('[1.0, 9, 2, .9]')  <-> tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 0.0
(1 row)

RETURN tovector('[5.0, 2, 4, .324]')  <-> tovector('[1.0, 9, 2, .9]');
     ?column?     
------------------
 8.32657048249758
(1 row)

RETURN tovector('[1.0]')  <-> tovector('[2.0]');
 ?column? 
----------
 1.0
(1 row)

--
-- inner product
--
RETURN inner_product(tovector('[1.0, 9, 2, .9]'), tovector('[1.0, 9, 2, .9]'));
 inner_product 
---------------
 86.81
(1 row)

RETURN inner_product(tovector('[5.0, 2, 4, .324]'), tovector('[1.0, 9, 2, .9]'));
 inner_product 
---------------
 31.2916
(1 row)

RETURN inner_product(tovector('[1.0]'), tovector('[2.0]'));
 inner_product 
---------------
 2.0
(1 row)

--
-- negative inner product
--
RETURN negative_inner_product(tovector('[1.0, 9, 2, .9]'), tovector('[1.0, 9, 2, .9]'));
 negative_inner_product 
------------------------
 -86.81
(1 row)

RETURN negative_inner_product(tovector('[5.0, 2, 4, .324]'), tovector('[1.0, 9, 2, .9]'));
 negative_inner_product 
------------------------
 -31.2916
(1 row)

RETURN negative_inner_product(tovector('[1.0]'), tovector('[2.0]'));
 negative_inner_product 
------------------------
 -2.0
(1 row)

RETURN tovector('[1.0, 9, 2, .9]')  <-> tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 0.0
(1 row)

RETURN tovector('[5.0, 2, 4, .324]')  <#> tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 -31.2916
(1 row)

RETURN tovector('[1.0]')  <#> tovector('[2.0]');
 ?column? 
----------
 -2.0
(1 row)

--
-- cosine distance
--
RETURN tovector('[1.0, 9, 2, .9]')  <=> tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 0.0
(1 row)

RETURN tovector('[5.0, 2, 4, .324]')  <=> tovector('[1.0, 9, 2, .9]');
     ?column?      
-------------------
 0.499930158237086
(1 row)

RETURN tovector('[1.0]')  <=> tovector('[2.0]');
 ?column? 
----------
 0.0
(1 row)

--
-- l1 distance
--
RETURN l1_distance(tovector('[1.0, 9, 2, .9]'), tovector('[1.0, 9, 2, .9]'));
 l1_distance 
-------------
 0.0
(1 row)

RETURN l1_distance(tovector('[5.0, 2, 4, .324]'), tovector('[1.0, 9, 2, .9]'));
 l1_distance 
-------------
 13.576
(1 row)

RETURN l1_distance(tovector('[1.0]'), tovector('[2.0]'));
 l1_distance 
-------------
 1.0
(1 row)

--
-- spherical distance
--
RETURN spherical_distance(tovector('[1.0, 9, 2, .9]'), tovector('[1.0, 9, 2, .9]'));
 spherical_distance 
--------------------
 0.0
(1 row)

RETURN spherical_distance(tovector('[5.0, 2, 4, .324]'), tovector('[1.0, 9, 2, .9]'));
 spherical_distance 
--------------------
 0.0
(1 row)

RETURN spherical_distance(tovector('[1.0]'), tovector('[2.0]'));
 spherical_distance 
--------------------
 0.0
(1 row)

--
-- dims
--
RETURN dims(tovector('[1.0, 9, 2, .9]'));
 dims 
------
 4.0
(1 row)

RETURN dims(tovector('[5.0, 2, 4, .324]'));
 dims 
------
 4.0
(1 row)

RETURN dims(tovector('[1.0]'));
 dims 
------
 1.0
(1 row)

--
-- norm
--
RETURN norm(tovector('[1.0, 9, 2, .9]'));
       norm       
------------------
 9.31718841711382
(1 row)

RETURN norm(tovector('[5.0, 2, 4, .324]'));
       norm       
------------------
 6.71602382366233
(1 row)

RETURN norm(tovector('[1.0]'));
 norm 
------
 1.0
(1 row)

--
-- + Operator
--
RETURN tovector('[1.0, 9, 2, .9]')  + tovector('[1.0, 9, 2, .9]');
       ?column?        
-----------------------
 [2.0, 18.0, 4.0, 1.8]
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') + tovector('[1.0, 9, 2, .9]');
        ?column?         
-------------------------
 [6.0, 11.0, 6.0, 1.224]
(1 row)

RETURN tovector('[1.0]') + tovector('[2.0]');
 ?column? 
----------
 [3.0]
(1 row)

--
-- - Operator
--
RETURN tovector('[1.0, 9, 2, .9]')  - tovector('[1.0, 9, 2, .9]');
       ?column?       
----------------------
 [0.0, 0.0, 0.0, 0.0]
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') - tovector('[1.0, 9, 2, .9]');
         ?column?         
--------------------------
 [4.0, -7.0, 2.0, -0.576]
(1 row)

RETURN tovector('[1.0]') - tovector('[2.0]');
 ?column? 
----------
 [-1.0]
(1 row)

--
-- * Operator
--
RETURN tovector('[1.0, 9, 2, .9]')  * tovector('[1.0, 9, 2, .9]');
        ?column?        
------------------------
 [1.0, 81.0, 4.0, 0.81]
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') * tovector('[1.0, 9, 2, .9]');
         ?column?         
--------------------------
 [5.0, 18.0, 8.0, 0.2916]
(1 row)

RETURN tovector('[1.0]') * tovector('[2.0]');
 ?column? 
----------
 [2.0]
(1 row)

--
-- = Operator
--
RETURN tovector('[1.0, 9, 2, .9]') = tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 t
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') = tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 f
(1 row)

RETURN tovector('[1.0]') = tovector('[2.0]');
 ?column? 
----------
 f
(1 row)

--
-- <> Operator
--
RETURN tovector('[1.0, 9, 2, .9]') <> tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 f
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') <> tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 t
(1 row)

RETURN tovector('[1.0]') <> tovector('[2.0]');
 ?column? 
----------
 t
(1 row)

--
-- > Operator
--
RETURN tovector('[1.0, 9, 2, .9]') > tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 f
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') > tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 t
(1 row)

RETURN tovector('[1.0]') > tovector('[2.0]');
 ?column? 
----------
 f
(1 row)

--
-- >= Operator
--
RETURN tovector('[1.0, 9, 2, .9]')  >= tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 t
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') >= tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 t
(1 row)

RETURN tovector('[1.0]') >= tovector('[2.0]');
 ?column? 
----------
 f
(1 row)

--
-- < Operator
--
RETURN tovector('[1.0, 9, 2, .9]') < tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 f
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') < tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 f
(1 row)

RETURN tovector('[1.0]') < tovector('[2.0]');
 ?column? 
----------
 t
(1 row)

--
-- <= Operator
--
RETURN tovector('[1.0, 9, 2, .9]') <= tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 t
(1 row)

RETURN tovector('[5.0, 2, 4, .324]') <= tovector('[1.0, 9, 2, .9]');
 ?column? 
----------
 f
(1 row)

RETURN tovector('[1.0]') <= tovector('[2.0]');
 ?column? 
----------
 t
(1 row)

--
-- l2 squared distance
--
RETURN l2_squared_distance(tovector('[1.0, 9, 2, .9]'), tovector('[1.0, 9, 2, .9]'));
 l2_squared_distance 
---------------------
 0.0
(1 row)

RETURN l2_squared_distance(tovector('[5.0, 2, 4, .324]'), tovector('[1.0, 9, 2, .9]'));
 l2_squared_distance 
---------------------
 69.331776
(1 row)

RETURN l2_squared_distance(tovector('[1.0]'), tovector('[2.0]'));
 l2_squared_distance 
---------------------
 1.0
(1 row)

SELECT gtype_build_map('i'::text, tovector('"[0, 0, 0]"'::gtype)); 
    gtype_build_map     
------------------------
 {"i": [0.0, 0.0, 0.0]}
(1 row)

SELECT gtype_build_list('i'::text, tovector('"[0, 0, 0]"'::gtype));
    gtype_build_list    
------------------------
 ["i", [0.0, 0.0, 0.0]]
(1 row)

SELECT gtype_build_map('i'::text, tovector('"[0, 0, 0]"'::gtype))->'"i"';
    ?column?     
-----------------
 [0.0, 0.0, 0.0]
(1 row)

--
-- cleanup
--
DROP GRAPH vector CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table vector._ag_label_vertex
drop cascades to table vector._ag_label_edge
NOTICE:  graph "vector" has been dropped
 drop_graph 
------------
 
(1 row)

