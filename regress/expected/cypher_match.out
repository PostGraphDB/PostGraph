/*
 * Copyright (C) 2023-2024 PostGraphDB
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Portions Copyright (c) 2020-2023, Apache Software Foundation
 * Portions Copyright (c) 2019-2020, Bitnine Global
 */ 
LOAD 'postgraph';
CREATE GRAPH cypher_match;
NOTICE:  graph "cypher_match" has been created
 create_graph 
--------------
 
(1 row)

USE GRAPH cypher_match;
 use_graph 
-----------
 
(1 row)

CREATE (:v);
--
(0 rows)

CREATE (:v {i: 0});
--
(0 rows)

CREATE (:v {i: 1});
--
(0 rows)

MATCH (n:v) RETURN n;
                               n                               
---------------------------------------------------------------
 {"id": 844424930131969, "label": "v", "properties": {}}
 {"id": 844424930131970, "label": "v", "properties": {"i": 0}}
 {"id": 844424930131971, "label": "v", "properties": {"i": 1}}
(3 rows)

MATCH (n:v) RETURN n.i;
ERROR:  operator does not exist: postgraph.vertex -> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (n:v) WHERE n.i > 0
RETURN n.i;
ERROR:  operator does not exist: postgraph.gtype -> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--Directed Paths
CREATE (:v1 {id:'initial'})-[:e1]->(:v1 {id:'middle'})-[:e1]->(:v1 {id:'end'});
--
(0 rows)

--Undirected Path Tests
MATCH p=(:v1)-[:e1]-(:v1)-[:e1]-(:v1) RETURN p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH p=(a:v1)-[]-()-[]-() RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[]-()-[]-(a:v1) RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[]-(a:v1)-[]-() RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[b:e1]-()-[]-() RETURN b;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (a:v1)-[]->(), ()-[]->(a) RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH p=()-[e]-() RETURN e;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-- Right Path Test
MATCH (a:v1)-[:e1]->(b:v1)-[:e1]->(c:v1) RETURN a, b, c;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH p=(a:v1)-[]-()-[]->() RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH p=(a:v1)-[]->()-[]-() RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[]-()-[]->(a:v1) RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[]-(a:v1)-[]->() RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[b:e1]-()-[]->() RETURN b;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--Left Path Test
MATCH (a:v1)<-[:e1]-(b:v1)<-[:e1]-(c:v1) RETURN a, b, c;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH p=(a:v1)<-[]-()-[]-() RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH p=(a:v1)-[]-()<-[]-() RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()<-[]-()-[]-(a:v1) RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()<-[]-(a:v1)-[]-() RETURN a;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()<-[b:e1]-()-[]-() RETURN b;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--Divergent Path Tests
CREATE (:v2 {id:'initial'})<-[:e2]-(:v2 {id:'middle'})-[:e2]->(:v2 {id:'end'});
--
(0 rows)

MATCH ()<-[]-(n:v2)-[]->() MATCH p=()-[]->(n) RETURN p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()<-[]-(n:v2)-[]->() MATCH p=(n)-[]->() RETURN p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[]-(n:v2) RETURN n;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--Convergent Path Tests
CREATE (:v3 {id:'initial'})-[:e3]->(:v3 {id:'middle'})<-[:e3]-(:v3 {id:'end'});
--
(0 rows)

MATCH ()-[b:e1]->() RETURN b;
                                                          b                                                          
---------------------------------------------------------------------------------------------------------------------
 {"id": 1407374883553281, "start_id": 1125899906842626, "end_id": 1125899906842627, "label": "e1", "properties": {}}
 {"id": 1407374883553282, "start_id": 1125899906842625, "end_id": 1125899906842626, "label": "e1", "properties": {}}
(2 rows)

MATCH ()-[]->(n:v1)<-[]-() MATCH p=(n)<-[]-() RETURN p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[]->(n:v1)<-[]-() MATCH p=()-[]->(n) RETURN p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH ()-[]->(n:v1)<-[]-() MATCH p=(n)-[]->() RETURN p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH con_path=(a)-[]->()<-[]-() WHERE a.id = 'initial' RETURN con_path;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH div_path=(b)<-[]-()-[]->() WHERE b.id = 'initial' RETURN div_path;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--Patterns
MATCH (a:v1), p=(a)-[]-()-[]-() WHERE a.id = 'initial' RETURN p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH con_path=(a)-[]->()<-[]-(), div_path=(b)<-[]-()-[]->() WHERE a.id = 'initial' AND b.id = 'initial' RETURN con_path, div_path;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (a:v), p=()-[]->()-[]->() RETURN a.i, p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--Multiple Match Clauses
MATCH (a:v1) WHERE a.id = 'initial' MATCH p=(a)-[]-()-[]-() RETURN p;
ERROR:  operator does not exist: postgraph.gtype -> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (a:v) MATCH p=()-[]->()-[]->() RETURN a.i, p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (a:v) MATCH (b:v1)-[]-(c) RETURN a.i, b.id, c.id;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--
-- Property constraints
--
CREATE ({string_key: 'test', int_key: 1, float_key: 3.14, map_key: {key: 'value'}, list_key: [1, 2, 3]});
ERROR:  syntax error at or near "key"
LINE 1: ...y: 'test', int_key: 1, float_key: 3.14, map_key: {key: 'valu...
                                                             ^
CREATE ({lst: [1, NULL, 3.14, 'string', {key: 'value'}, []]});
ERROR:  syntax error at or near "key"
LINE 1: CREATE ({lst: [1, NULL, 3.14, 'string', {key: 'value'}, []]}...
                                                 ^
MATCH (n  {string_key: NULL}) RETURN n;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (n  {string_key: 'wrong value'}) RETURN n ;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (n {string_key: 'test', int_key: 1, float_key: 3.14, map_key: {key: 'value'}, list_key: [1, 2, 3]}) RETURN n;
ERROR:  syntax error at or near "key"
LINE 1: ...y: 'test', int_key: 1, float_key: 3.14, map_key: {key: 'valu...
                                                             ^
MATCH (n {string_key: 'test'}) RETURN n;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (n {lst: [1, NULL, 3.14, 'string', {key: 'value'}, []]}) RETURN n;
ERROR:  syntax error at or near "key"
LINE 1: MATCH (n {lst: [1, NULL, 3.14, 'string', {key: 'value'}, []]...
                                                  ^
MATCH (n {lst: [1, NULL, 3.14, 'string', {key: 'value'}, [], 'extra value']})  RETURN n;
ERROR:  syntax error at or near "key"
LINE 1: MATCH (n {lst: [1, NULL, 3.14, 'string', {key: 'value'}, [],...
                                                  ^
-- Path of one vertex.
MATCH p=() RETURN p;
                                     p                                      
----------------------------------------------------------------------------
 [{"id": 2251799813685249, "label": "v3", "properties": {"id": "initial"}}]
 [{"id": 2251799813685250, "label": "v3", "properties": {"id": "middle"}}]
 [{"id": 2251799813685251, "label": "v3", "properties": {"id": "end"}}]
 [{"id": 1688849860263937, "label": "v2", "properties": {"id": "initial"}}]
 [{"id": 1688849860263938, "label": "v2", "properties": {"id": "middle"}}]
 [{"id": 1688849860263939, "label": "v2", "properties": {"id": "end"}}]
 [{"id": 1125899906842625, "label": "v1", "properties": {"id": "initial"}}]
 [{"id": 1125899906842626, "label": "v1", "properties": {"id": "middle"}}]
 [{"id": 1125899906842627, "label": "v1", "properties": {"id": "end"}}]
 [{"id": 844424930131969, "label": "v", "properties": {}}]
 [{"id": 844424930131970, "label": "v", "properties": {"i": 0}}]
 [{"id": 844424930131971, "label": "v", "properties": {"i": 1}}]
(12 rows)

--
-- MATCH with WHERE EXISTS(pattern)
--
MATCH (u)-[e]->(v) RETURN u, e, v ;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u)-[e]->(v) WHERE EXISTS ((u)-[e]->(v)) RETURN u, e, v;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-- Property Constraint in EXISTS
MATCH (u) WHERE EXISTS((u)-[]->({id: 'middle'})) RETURN u;
ERROR:  MATCH cannot be the last clause in a cypher statement
MATCH (u) WHERE EXISTS((u)-[]->({id: 'not a valid id'})) RETURN u;
ERROR:  MATCH cannot be the last clause in a cypher statement
MATCH (u) WHERE EXISTS((u)-[]->({id: NULL})) RETURN u;
ERROR:  MATCH cannot be the last clause in a cypher statement
-- Exists checks for a loop. There shouldn't be any.
MATCH (u)-[e]->(v) WHERE EXISTS((u)-[e]->(u)) RETURN u, e, v;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-- Querying NOT EXISTS syntax
-- Create a loop
CREATE (u:loop {id:'initial'})-[:self]->(u);
--
(0 rows)

-- dump paths
MATCH (u)-[e]->(v) WHERE EXISTS((u)-[e]->(v)) RETURN u, e, v;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-- Exists checks for a loop. There should be one.
MATCH (u)-[e]->(v) WHERE EXISTS((u)-[e]->(u)) RETURN u, e, v;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-- Exists checks for a loop. There should be one.
MATCH (u)-[e]->(v) WHERE EXISTS((v)-[e]->(v)) RETURN u, e, v;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-- Exists checks for a loop. There should be none because of edge uniqueness
-- requirement.
MATCH (u)-[e]->(v) WHERE EXISTS((u)-[e]->(u)-[e]->(u)) RETURN u, e, v;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u)-[e]->(v) WHERE EXISTS((u)-[e]->(u)) AND EXISTS((v)-[e]->(v)) RETURN u, e, v;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u)-[e]->(v) WHERE EXISTS((u)-[e]->(x)) RETURN u, e, v;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE EXISTS(MATCH (u)-[]->({id: 'middle'}) RETURN 1) RETURN u;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE EXISTS(MATCH (u)-[]->({id: 'middle'}) RETURN u) RETURN u;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE u.id = ANY (MATCH (v) RETURN v.id) RETURN u;
ERROR:  operator does not exist: postgraph.vertex -> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE u.id = ANY (MATCH (v) RETURN NULL) RETURN u;
ERROR:  operator does not exist: postgraph.gtype -> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE u.id = SOME (MATCH (v) RETURN v.id) RETURN u;
ERROR:  operator does not exist: postgraph.vertex -> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE u.id = ALL (MATCH (v) RETURN v.id) RETURN u;
ERROR:  operator does not exist: postgraph.vertex -> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u)
WHERE EXISTS( MATCH (u)-[]->(v) WHERE v.id = 'middle' RETURN 1)
RETURN u;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE EXISTS(MATCH (u)-[]->({id: 'gsjka'}) RETURN 1) RETURN u;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE EXISTS(MATCH (v {id: 'middle'}) MATCH (u)-[]->(v) RETURN 1) RETURN u;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE EXISTS(MATCH (v {id: 'middle'}) MATCH (u)-[]->(v) RETURN 1) RETURN u;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) WHERE EXISTS(MATCH (u)-[]->(v {id: 'middle'}) RETURN 1) RETURN u;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) RETURN case WHEN EXISTS(MATCH (u)-[]->({id: 'gsjka'}) RETURN 1) THEN 1 ELSE 2 END;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) RETURN case WHEN EXISTS(MATCH (u)-[]->() RETURN 1) THEN 1 ELSE 2 END;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
 
MATCH (u) RETURN case WHEN EXISTS(MATCH (u)-[]->() RETURN 1) THEN 1 ELSE 2 END;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH (u) RETURN case WHEN EXISTS((u)-[]->()) THEN 1 ELSE 2 END;
ERROR:  MATCH cannot be the last clause in a cypher statement
/*
EXPLAIN
SELECT *
FROM cypher_match._ag_label_vertex as u
WHERE EXISTS (
SELECT * FROM cypher_match._ag_label_edge as e 
JOIN cypher_match._ag_label_vertex as v ON v.id = e.end_id
WHERE u.id = e.start_id
);
*/
--
--Distinct
--
MATCH (u) RETURN DISTINCT props(u);
ERROR:  function postgraph.props(postgraph.vertex) does not exist
LINE 14: MATCH (u) RETURN DISTINCT props(u);
                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CREATE (u:duplicate)-[:dup_edge {id:1 }]->(:other_v);
--
(0 rows)

MATCH (u:duplicate) CREATE (u)-[:dup_edge {id:2 }]->(:other_v);
--
(0 rows)

MATCH (u:duplicate)-[]-(:other_v) RETURN DISTINCT u;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
MATCH p=(:duplicate)-[]-(:other_v) RETURN DISTINCT p;
ERROR:  operator does not exist: postgraph.graphid = postgraph.graphid
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--
-- Limit & Skip
--
MATCH (u) RETURN u;
                                     u                                      
----------------------------------------------------------------------------
 {"id": 844424930131969, "label": "v", "properties": {}}
 {"id": 844424930131970, "label": "v", "properties": {"i": 0}}
 {"id": 844424930131971, "label": "v", "properties": {"i": 1}}
 {"id": 1125899906842625, "label": "v1", "properties": {"id": "initial"}}
 {"id": 1125899906842626, "label": "v1", "properties": {"id": "middle"}}
 {"id": 1125899906842627, "label": "v1", "properties": {"id": "end"}}
 {"id": 1688849860263937, "label": "v2", "properties": {"id": "initial"}}
 {"id": 1688849860263938, "label": "v2", "properties": {"id": "middle"}}
 {"id": 1688849860263939, "label": "v2", "properties": {"id": "end"}}
 {"id": 2251799813685249, "label": "v3", "properties": {"id": "initial"}}
 {"id": 2251799813685250, "label": "v3", "properties": {"id": "middle"}}
 {"id": 2251799813685251, "label": "v3", "properties": {"id": "end"}}
 {"id": 2814749767106561, "label": "loop", "properties": {"id": "initial"}}
 {"id": 3377699720527873, "label": "duplicate", "properties": {}}
 {"id": 3940649673949185, "label": "other_v", "properties": {}}
 {"id": 3940649673949186, "label": "other_v", "properties": {}}
(16 rows)

MATCH (u) RETURN u LIMIT 3;
                               u                               
---------------------------------------------------------------
 {"id": 844424930131969, "label": "v", "properties": {}}
 {"id": 844424930131970, "label": "v", "properties": {"i": 0}}
 {"id": 844424930131971, "label": "v", "properties": {"i": 1}}
(3 rows)

MATCH (u) RETURN u SKIP 7;
                                     u                                      
----------------------------------------------------------------------------
 {"id": 1688849860263938, "label": "v2", "properties": {"id": "middle"}}
 {"id": 1688849860263939, "label": "v2", "properties": {"id": "end"}}
 {"id": 2251799813685249, "label": "v3", "properties": {"id": "initial"}}
 {"id": 2251799813685250, "label": "v3", "properties": {"id": "middle"}}
 {"id": 2251799813685251, "label": "v3", "properties": {"id": "end"}}
 {"id": 2814749767106561, "label": "loop", "properties": {"id": "initial"}}
 {"id": 3377699720527873, "label": "duplicate", "properties": {}}
 {"id": 3940649673949185, "label": "other_v", "properties": {}}
 {"id": 3940649673949186, "label": "other_v", "properties": {}}
(9 rows)

MATCH (u) RETURN u SKIP 7 LIMIT 3;
                                    u                                     
--------------------------------------------------------------------------
 {"id": 1688849860263938, "label": "v2", "properties": {"id": "middle"}}
 {"id": 1688849860263939, "label": "v2", "properties": {"id": "end"}}
 {"id": 2251799813685249, "label": "v3", "properties": {"id": "initial"}}
(3 rows)

--
-- Optional Match
--
CREATE (:opt_match_v {name: 'someone'})-[:opt_match_e]->(:opt_match_v {name: 'somebody'}),
        (:opt_match_v {name: 'anybody'})-[:opt_match_e]->(:opt_match_v {name: 'nobody'});
ERROR:  syntax error at or near "name"
LINE 1: CREATE (:opt_match_v {name: 'someone'})-[:opt_match_e]->(:op...
                              ^
MATCH (u:opt_match_v) OPTIONAL MATCH (u)-[m]-(l) RETURN u.name as u, type(m), l.name as l ORDER BY u, m, l;
ERROR:  syntax error at or near "name"
LINE 1: ...:opt_match_v) OPTIONAL MATCH (u)-[m]-(l) RETURN u.name as u,...
                                                             ^
OPTIONAL MATCH (n:opt_match_v)-[r]->(p), (m:opt_match_v)-[s]->(q) WHERE id(n) <> id(m) RETURN n.name as n, type(r); m.name AS m, type(s); ORDER BY n, p, m, q;
ERROR:  syntax error at or near "name"
LINE 1: ...t_match_v)-[s]->(q) WHERE id(n) <> id(m) RETURN n.name as n,...
                                                             ^
ERROR:  syntax error at or near "m"
LINE 1: m.name AS m, type(s);
        ^
ERROR:  syntax error at or near "ORDER"
LINE 1: ORDER BY n, p, m, q;
        ^
MATCH (n:opt_match_v), (m:opt_match_v)
WHERE id(n) <> id(m)
OPTIONAL MATCH (n)-[r]->(p), (m)-[s]->(q)
RETURN n.name AS n, type(r),
           m.name AS m, type(s)
ORDER BY n, p, m, q;
ERROR:  syntax error at or near "name"
LINE 4: RETURN n.name AS n, type(r),
                 ^
CREATE (u {name: 'orphan'}) CREATE (u1 {name: 'F'})-[u2:e1]->(u3 {name: 'T'}) RETURN u1, u2, u3;
ERROR:  syntax error at or near "name"
LINE 1: CREATE (u {name: 'orphan'}) CREATE (u1 {name: 'F'})-[u2:e1]-...
                   ^
-- Querying NOT EXISTS syntax
MATCH (f),(t) WHERE NOT EXISTS((f)-[]->(t)) RETURN f.name, t.name;
ERROR:  syntax error at or near "name"
LINE 1: ...CH (f),(t) WHERE NOT EXISTS((f)-[]->(t)) RETURN f.name, t.na...
                                                             ^
-- Querying EXISTS syntax
MATCH (f),(t) WHERE EXISTS((f)-[]->(t)) RETURN f.name, t.name;
ERROR:  syntax error at or near "name"
LINE 1: MATCH (f),(t) WHERE EXISTS((f)-[]->(t)) RETURN f.name, t.nam...
                                                         ^
--
-- Constraints and WHERE clause together
--
CREATE ({i: 1, j: 2, k: 3}), ({i: 1, j: 3}), ({i:2, k: 3});
--
(0 rows)

MATCH (n {j: 2}) WHERE n.i = 1 RETURN n;
ERROR:  operator does not exist: postgraph.gtype @> postgraph.gtype
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
--
-- Prepared Statement Property Constraint
--
-- TODO
--
-- Errors
--
-- need a following RETURN clause
MATCH (n:v);
ERROR:  MATCH cannot be the last clause in a cypher statement
--Invalid Variables
MATCH (a)-[]-()-[]-(a:v1) RETURN a;
ERROR:  variable a already exists
LINE 1: MATCH (a)-[]-()-[]-(a:v1) RETURN a;
                           ^
MATCH (a:v1)-[]-()-[a]-() RETURN a;
ERROR:  variable a already exists
LINE 1: MATCH (a:v1)-[]-()-[a]-() RETURN a;
                           ^
MATCH (a:v1)-[]-()-[]-(a {id:'will_fail'}) RETURN a;
ERROR:  variable a already exists
LINE 1: MATCH (a:v1)-[]-()-[]-(a {id:'will_fail'}) RETURN a;
                              ^
--Incorrect Labels
MATCH (n)-[:v]-() RETURN n;
ERROR:  label v is for vertices, not edges
LINE 1: MATCH (n)-[:v]-() RETURN n;
                  ^
MATCH (n)-[:emissing]-() RETURN n;
ERROR:  label emissing does not exists
LINE 1: MATCH (n)-[:emissing]-() RETURN n;
                  ^
MATCH (n:e1)-[]-() RETURN n;
ERROR:  label e1 is for edges, not vertices
LINE 1: MATCH (n:e1)-[]-() RETURN n;
              ^
MATCH (n:vmissing)-[]-() RETURN n;
ERROR:  label vmissing does not exists
LINE 1: MATCH (n:vmissing)-[]-() RETURN n;
              ^
--
-- Clean up
--
DROP GRAPH cypher_match CASCADE;
NOTICE:  drop cascades to 14 other objects
DETAIL:  drop cascades to table cypher_match._ag_label_vertex
drop cascades to table cypher_match._ag_label_edge
drop cascades to table cypher_match.v
drop cascades to table cypher_match.v1
drop cascades to table cypher_match.e1
drop cascades to table cypher_match.v2
drop cascades to table cypher_match.e2
drop cascades to table cypher_match.v3
drop cascades to table cypher_match.e3
drop cascades to table cypher_match.loop
drop cascades to table cypher_match.self
drop cascades to table cypher_match.duplicate
drop cascades to table cypher_match.dup_edge
drop cascades to table cypher_match.other_v
NOTICE:  graph "cypher_match" has been dropped
 drop_graph 
------------
 
(1 row)

--
-- End
--
