/*
 * Copyright (C) 2023 PostGraphDB
 *  
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

--
-- graphid - comparison operators (=, <>, <, >, <=, >=)
--
CREATE FUNCTION graphid_eq(postgraph.graphid, postgraph.graphid) 
RETURNS boolean 
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';

CREATE OPERATOR = (
    FUNCTION = graphid_eq, 
    LEFTARG = graphid, 
    RIGHTARG = graphid, 
    COMMUTATOR = =, 
    NEGATOR = <>, 
    RESTRICT = eqsel, 
    JOIN = eqjoinsel, 
    HASHES, 
    MERGES
);

CREATE FUNCTION graphid_ne(graphid, graphid) 
RETURNS boolean 
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';

CREATE OPERATOR <> (
    FUNCTION = graphid_ne, 
    LEFTARG = graphid, 
    RIGHTARG = graphid, 
    COMMUTATOR = <>, 
    NEGATOR = =, 
    RESTRICT = neqsel, 
    JOIN = neqjoinsel
);

CREATE FUNCTION graphid_lt(graphid, graphid) 
RETURNS boolean 
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';

CREATE FUNCTION graphid_gt(graphid, graphid) 
RETURNS boolean 
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';


CREATE FUNCTION graphid_le(graphid, graphid) 
RETURNS boolean 
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';

CREATE FUNCTION graphid_ge(graphid, graphid) 
RETURNS boolean 
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';


--
-- graphid - B-tree support functions
--
-- comparison support
CREATE FUNCTION graphid_btree_cmp(graphid, graphid) 
RETURNS int 
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';

-- sort support
CREATE FUNCTION graphid_btree_sort(internal) 
RETURNS void 
LANGUAGE c 
IMMUTABLE
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';



--
-- graphid functions
--
CREATE FUNCTION _graphid(label_id int, entry_id bigint) 
RETURNS graphid 
LANGUAGE c 
IMMUTABLE 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';

CREATE FUNCTION _label_name(graph_oid oid, graphid) 
RETURNS cstring 
LANGUAGE c 
STABLE 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';

CREATE FUNCTION _extract_label_id(graphid) 
RETURNS label_id 
LANGUAGE c 
STABLE 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';



CREATE OPERATOR < (
    FUNCTION = graphid_lt, 
    LEFTARG = graphid, 
    RIGHTARG = graphid, 
    COMMUTATOR = >, 
    NEGATOR = >=, 
    RESTRICT = scalarltsel, 
    JOIN = scalarltjoinsel
);

CREATE OPERATOR > (
    FUNCTION = graphid_gt, 
    LEFTARG = graphid, 
    RIGHTARG = graphid, 
    COMMUTATOR = <, 
    NEGATOR = <=, 
    RESTRICT = scalargtsel, 
    JOIN = scalargtjoinsel
);

CREATE OPERATOR <= (
    FUNCTION = graphid_le, 
    LEFTARG = graphid, 
    RIGHTARG = graphid, 
    COMMUTATOR = >=, 
    NEGATOR = >, 
    RESTRICT = scalarlesel, 
    JOIN = scalarlejoinsel);

CREATE OPERATOR >= (
    FUNCTION = graphid_ge, 
    LEFTARG = graphid, 
    RIGHTARG = graphid, 
    COMMUTATOR = <=, 
    NEGATOR = <, 
    RESTRICT = scalargesel, 
    JOIN = scalargejoinsel
);

--
-- graphid - hash operator class
--
CREATE FUNCTION graphid_hash_cmp(graphid) 
RETURNS INTEGER 
LANGUAGE c 
IMMUTABLE 
PARALLEL SAFE 
AS 'MODULE_PATHNAME';

CREATE OPERATOR CLASS graphid_ops_hash 
DEFAULT FOR TYPE graphid 
USING hash 
AS 
    OPERATOR 1 =, 
    FUNCTION 1 graphid_hash_cmp(graphid);
--
-- btree operator classes for graphid
--
CREATE OPERATOR CLASS graphid_ops 
DEFAULT FOR TYPE graphid 
USING btree 
AS 
    OPERATOR 1 <, 
    OPERATOR 2 <=, 
    OPERATOR 3 =, 
    OPERATOR 4 >=, 
    OPERATOR 5 >,
    FUNCTION 1 graphid_btree_cmp (graphid, graphid), 
    FUNCTION 2 graphid_btree_sort (internal);
