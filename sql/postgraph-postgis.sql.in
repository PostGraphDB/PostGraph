/*
 * Copyright (C) 2023 PostGraphDB
 *  
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

--
-- Box3D Functions
--
CREATE FUNCTION ST_XMin (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_xmin';

CREATE FUNCTION ST_XMax (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_xmax';

CREATE FUNCTION ST_ZMin (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_zmin';

CREATE FUNCTION ST_YMin (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_ymin';

CREATE FUNCTION ST_YMax (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_ymax';

CREATE FUNCTION ST_ZMax (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_zmax';


--
-- PostGIS 2D Geometry Operators
--
CREATE OR REPLACE FUNCTION gtype_geometry_same(geom1 gtype, geom2 gtype)
RETURNS boolean
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_same_2d';

CREATE OPERATOR ~= (
    LEFTARG = gtype, 
    RIGHTARG = gtype,
    PROCEDURE = gtype_geometry_same,
    RESTRICT = contsel,
    JOIN = contjoinsel
);

CREATE OR REPLACE FUNCTION gtype_geometry_within(geom1 gtype, geom2 gtype)
RETURNS bool
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_within_2d';

CREATE OPERATOR @ (
LEFTARG = gtype,
RIGHTARG = gtype,
PROCEDURE = gtype_geometry_within--,
-- Updated: 3.4.0 to use selectivity estimator
--RESTRICT = gserialized_gist_sel_2d,
-- Updated: 3.4.0 to use join selectivity estimator
--JOIN = gserialized_gist_joinsel_2d
);

CREATE OR REPLACE FUNCTION gtype_geometry_overleft(geom1 gtype, geom2 gtype)
RETURNS bool
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_overleft_2d';

CREATE OPERATOR &< (
LEFTARG = gtype,
RIGHTARG = gtype,
PROCEDURE = gtype_geometry_overleft,
RESTRICT = positionsel,
JOIN = positionjoinsel
);

CREATE OR REPLACE FUNCTION gtype_geometry_below(geom1 gtype, geom2 gtype)
RETURNS bool
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_below_2d';


CREATE OPERATOR <<| (
LEFTARG = gtype,
RIGHTARG = gtype,
PROCEDURE = gtype_geometry_below,
--COMMuTAOR = '<<|',
RESTRICT = positionsel,
JOIN = positionjoinsel
);


CREATE OR REPLACE FUNCTION gtype_geometry_overbelow(geom1 gtype, geom2 gtype)
RETURNS bool
LANGUAGE c
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_overbelow_2d';

CREATE OPERATOR &<| (
LEFTARG = gtype,
RIGHTARG = gtype,
PROCEDURE = gtype_geometry_overbelow,
RESTRICT = positionsel,
JOIN = positionjoinsel
);


CREATE OR REPLACE FUNCTION gtype_geometry_overright(geom1 gtype, geom2 gtype)
RETURNS bool
LANGUAGE c
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_overright_2d';

CREATE OPERATOR &> (
LEFTARG = gtype,
RIGHTARG = gtype,
PROCEDURE = gtype_geometry_overright,
RESTRICT = positionsel,
JOIN = positionjoinsel
);

CREATE OR REPLACE FUNCTION gtype_geometry_above(geom1 gtype, geom2 gtype)
RETURNS bool
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_above_2d';

CREATE OPERATOR |>> (
LEFTARG = gtype,
RIGHTARG = gtype,
PROCEDURE = gtype_geometry_above,
--COMMuTAOR = '<<|',
RESTRICT = positionsel,
JOIN = positionjoinsel
);

CREATE OR REPLACE FUNCTION gtype_geometry_overabove(geom1 gtype, geom2 gtype)
RETURNS bool
LANGUAGE c
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_overabove_2d';

CREATE OPERATOR |&> (
LEFTARG = gtype,
RIGHTARG = gtype,
PROCEDURE = gtype_geometry_overabove,
RESTRICT = positionsel,
JOIN = positionjoinsel
);

--
-- PostGIS Functions
--

--
-- PostGIS Constructors
--
CREATE FUNCTION ST_MakePoint (gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_makepoint';

CREATE FUNCTION ST_MakePoint (gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_makepoint';

CREATE FUNCTION ST_MakePoint (gtype, gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_makepoint';

CREATE FUNCTION ST_MakePointM (gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_makepoint3dm';


CREATE FUNCTION ST_asEWKT (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 250
AS 'MODULE_PATHNAME', 'gtype_asEWKT';

CREATE FUNCTION asEWKT (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 250
AS 'MODULE_PATHNAME', 'gtype_asEWKT';

CREATE FUNCTION addbbox (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_addBBOX';

CREATE FUNCTION postgis_addbbox (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_addBBOX';

CREATE FUNCTION dropbbox (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_dropBBOX';

CREATE FUNCTION postgis_dropbbox (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_dropBBOX';


CREATE FUNCTION ST_X (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_x_point';

CREATE FUNCTION X (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_x_point';

CREATE FUNCTION ST_Y (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_y_point';

CREATE FUNCTION Y (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_y_point';

CREATE FUNCTION ST_Z (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_z_point';

CREATE FUNCTION Z (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_z_point';

CREATE FUNCTION ST_M (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_m_point';

CREATE FUNCTION M (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 1
AS 'MODULE_PATHNAME', 'gtype_m_point';

--
-- PostGIS Functions - Measures
--
CREATE FUNCTION ST_IsPolygonCW (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_ST_IsPolygonCW';

CREATE FUNCTION ST_IsPolygonCCW (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_ST_IsPolygonCCW';

CREATE FUNCTION ST_DistanceSpheroid (gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 250
AS 'MODULE_PATHNAME', 'gtype_distance_ellipsoid';

CREATE FUNCTION ST_DistanceSpheroid (gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 250
AS 'MODULE_PATHNAME', 'gtype_distance_ellipsoid';

CREATE FUNCTION ST_azimuth (gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_azimuth';


--
-- PostGIS Functions - Temporal
--
CREATE FUNCTION ST_ClosestPointOfApproach (gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 5000
AS 'MODULE_PATHNAME', 'gtype_ST_ClosestPointOfApproach';

CREATE FUNCTION ST_DistanceCPA (gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 5000
AS 'MODULE_PATHNAME', 'gtype_ST_DistanceCPA';

CREATE OPERATOR |=| (
    LEFTARG = gtype, RIGHTARG = gtype,
    PROCEDURE = ST_DistanceCPA,
    COMMUTATOR = '|=|'
);

CREATE FUNCTION ST_IsValidTrajectory (gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 5000
AS 'MODULE_PATHNAME', 'gtype_st_isvalidtrajectory';

CREATE FUNCTION ST_CPAWithin (gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 5000
AS 'MODULE_PATHNAME', 'gtype_ST_CPAWithin';


--
-- PostGIS Functions - GEOS
--
CREATE FUNCTION ST_Intersection (gtype, gtype, gtype DEFAULT '-1.0'::gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 5000
AS 'MODULE_PATHNAME', 'gtype_st_intersection';

CREATE FUNCTION ST_GeneratePoints (area gtype, npoints gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 250
AS 'MODULE_PATHNAME', 'gtype_st_generatepoints';

CREATE FUNCTION ST_GeneratePoints (area gtype, npoints gtype, seed gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 250
AS 'MODULE_PATHNAME', 'gtype_st_generatepoints';


--
-- Algorithms
--
CREATE FUNCTION ST_Simplify (gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_ST_Simplify';

CREATE FUNCTION ST_Simplify (gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_ST_Simplify';

CREATE OR REPLACE FUNCTION ST_SnapToGrid(gtype, gtype, gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_snaptogrid';

CREATE OR REPLACE FUNCTION ST_SnapToGrid(gtype, gtype, gtype)
RETURNS gtype
AS 'SELECT ST_SnapToGrid($1, 0, 0, $2, $3)'
LANGUAGE sql 
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_SnapToGrid(gtype, gtype)
RETURNS gtype
AS 'SELECT ST_SnapToGrid($1, 0, 0, $2, $2)'
LANGUAGE sql
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_SnapToGrid(gtype, gtype, gtype, gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_snaptogrid_pointoff';


--
-- PostGIS Affine Functions
--
CREATE FUNCTION ST_Affine (gtype, gtype, gtype, gtype, gtype, gtype, gtype, gtype, gtype, gtype, gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_affine';

CREATE OR REPLACE FUNCTION ST_Affine(gtype, gtype, gtype, gtype, gtype, gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)'
LANGUAGE 'sql'
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_Rotate(gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)'
LANGUAGE 'sql'
IMMUTABLE 
RETURNS NULL ON NULL INPUT 
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_Rotate(gtype, gtype, gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, $3 - cos($2) * $3 + sin($2) * $4, $4 - sin($2) * $3 - cos($2) * $4, 0)'
LANGUAGE 'sql' 
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_Rotate(gtype, gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, ST_X($3) - cos($2) * ST_X($3) + sin($2) * ST_Y($3), ST_Y($3) - sin($2) * ST_X($3) - cos($2) * ST_Y($3), 0)'
LANGUAGE 'sql'
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_RotateZ(gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Rotate($1, $2)'
LANGUAGE 'sql'
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_RotateX(gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)'
LANGUAGE 'sql'
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_RotateY(gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)'
LANGUAGE 'sql'
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_Translate(gtype, gtype, gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)'
LANGUAGE 'sql'
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_Translate(gtype, gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Translate($1, $2, $3, 0)'
LANGUAGE 'sql'
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;

CREATE OR REPLACE FUNCTION ST_Scale(gtype, gtype)
RETURNS gtype
LANGUAGE c 
IMMUTABLE 
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_st_scale_2_args';

CREATE OR REPLACE FUNCTION ST_Scale(gtype, gtype, gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_st_scale';

CREATE OR REPLACE FUNCTION ST_Scale(gtype, gtype, gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Scale($1, ST_MakePoint($2, $3, $4))'
LANGUAGE sql
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;
/* XXX: Gonna Have to Get Creative With This One
CREATE OR REPLACE FUNCTION ST_Scale(gtype, gtype, gtype)
RETURNS gtype
AS 'SELECT ST_Scale($1, $2, $3, 1.0::float8::gtype)'
LANGUAGE sql
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50;
*/
--
-- MISC
--

CREATE OR REPLACE FUNCTION ST_Force2D(gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_force_2d';

CREATE OR REPLACE FUNCTION ST_Force3DZ(gtype, gtype default '0.0')
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_force_3dz';

CREATE OR REPLACE FUNCTION ST_Force3DM(gtype, gtype default '0.0')
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_force_3dm';

CREATE OR REPLACE FUNCTION ST_Force4D(gtype, gtype default '0.0', gtype default '0.0')
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_force_4d';

CREATE OR REPLACE FUNCTION ST_ForceCollection(gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_force_collection';

CREATE OR REPLACE FUNCTION ST_Multi(gtype)
RETURNS gtype
LANGUAGE c
IMMUTABLE
RETURNS NULL ON NULL INPUT
PARALLEL SAFE
COST 50
AS 'MODULE_PATHNAME', 'gtype_force_multi';


